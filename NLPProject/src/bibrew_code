{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"bibrew_code","provenance":[],"collapsed_sections":["07VrA9s_wGeZ","la6yb_G25IaH","n2ZllzS1h1dE"]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pmcmRG48SGWr"},"source":["# Dataset.\n","This section will create a dataset. The structure follows the one from HW2 seq_to_seq.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EaQW88HOR9YW","executionInfo":{"status":"ok","timestamp":1620999482452,"user_tz":240,"elapsed":21716,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"4b58058c-7025-4e0b-e591-4f5b868488a0"},"source":["from google.colab import drive \n","drive.mount(\"/content/drive\")\n","\n","MODEL_FOLDER = \"/content/drive/My Drive/mit-6864/bibrew\"\n","!mkdir -p \"/content/drive/My Drive/mit-6864/bibrew\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CCWn8aDGUTcV","executionInfo":{"status":"ok","timestamp":1620999488686,"user_tz":240,"elapsed":12730,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"5898cf9d-7539-4fd9-e036-96e9ee201cd4"},"source":["%%bash\n","git clone https://github.com/yoraish/bibrew.git\n","mkdir -p /content/bibrew/\n","\n","pip install sacrebleu"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting sacrebleu\n","  Downloading https://files.pythonhosted.org/packages/7e/57/0c7ca4e31a126189dab99c19951910bd081dea5bbd25f24b77107750eae7/sacrebleu-1.5.1-py3-none-any.whl (54kB)\n","Collecting portalocker==2.0.0\n","  Downloading https://files.pythonhosted.org/packages/89/a6/3814b7107e0788040870e8825eebf214d72166adf656ba7d4bf14759a06a/portalocker-2.0.0-py2.py3-none-any.whl\n","Installing collected packages: portalocker, sacrebleu\n","Successfully installed portalocker-2.0.0 sacrebleu-1.5.1\n"],"name":"stdout"},{"output_type":"stream","text":["Cloning into 'bibrew'...\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ubJvKF6vVdEO"},"source":["import sys\n","sys.path.append(\"/content/bibrew\")\n","sys.path.append(\"/content/bibrew/dataset\")\n","\n","# import lab_utils\n","\n","import torch \n","import numpy as np\n","\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","assert device == \"cuda\"   # use gpu whenever you can!\n","\n","seed = 42\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","torch.cuda.manual_seed(seed)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NcEV5-KXWXiM"},"source":["## Load raw data from repository."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3_d7PzQ8LyKe","executionInfo":{"status":"ok","timestamp":1620999492613,"user_tz":240,"elapsed":11298,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"67c737f5-3e0c-446b-ecbe-f4b2a065a866"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Gac-AFXlVzzq"},"source":["import random \n","import matplotlib.pyplot as plt\n","import os\n","import re\n","\n","num_in_letters = {\"טו\", \"טז\", \"יז\", \"יח\", \"יט\"}\n","letters = {\"י\",\"כ\", \"ל\", \"מ\", \"נ\", \"ס\", \"ע\", \"פ\", \"צ\", \"ק\", \"ר\", \"ש\", \"ת\"}\n","additionals = {\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ז\", \"ח\", \"ט\"}\n","for l in letters:\n","  for a in additionals:\n","    num_in_letters.add(l+a)\n","\n","\n","def clean_sentence(s, max_len = 48):\n","  # Sentence is list of strings (words).\n","  out = []\n","  for w in s:\n","    #  Remove punctuation marks.\n","    for punct in [\",\", \".\", \"!\", \"?\", \":\"]:\n","      w = w.replace(punct, \" \")\n","    \n","    if w == '' or len(w) < 2 or w in num_in_letters:\n","      continue\n","\n","    out.append(w)\n","\n","    # Remove nekud. TODO.\n","  return out\n","\n","def remove_pusak(text):\n","  \"\"\"Z added. The pusak mark is before the first space\"\"\"\n","  return text[text.find(\" \")+1:]\n","\n","src_vocab_set = set()\n","trg_vocab_set = set()\n","\n","src_sentences_list = []\n","tgt_sentences_list = []\n","\n","# Count how many books we have.\n","dataset_path = \"/content/bibrew/dataset/\"\n","# book_names = [name[:-4] for name in os.listdir(dataset_path) if os.path.isfile(os.path.join(dataset_path, name)) and name[-3:] == \"txt\"]\n","# print(\"The books we have are\", book_names)\n","\n","book_name = \"compiled\"\n","# for book_name in book_names:\n","with open(dataset_path + book_name+\".txt\") as f:\n","  # Read raw file.\n","  raw_book_text = f.read()\n","\n","  # Split to pesukim.\n","  raw_pesukim_book = raw_book_text.split(\"* * *\")\n","  # Remove first entry, it is not a translation. Also remove last three entries.\n","  raw_pesukim_book = raw_pesukim_book[1:-3]\n","\n","  # Filter each pesuk to:\n","  # * Remove newlines.\n","  # * Split to words.\n","  # * Remove פיסוק.\n","  # * Reverse sentences to be left to right. TRY BOTH IN EVAKUATION.\n","  # * Add lists to src_vocab_set and trg_vocab_set.\n","  wcount = 0\n","  for p in raw_pesukim_book:\n","\n","    if \"׃\" not in p:\n","      continue\n","    # Note, שׇׁ this and similar are meaningful! Colab doesn't like it, but it is a real letter (paste it in Google or something).\n","    # Remove newlines and replace with spaces.\n","    # p = remove_pusak(p) # ADDED \n","    p = re.sub(r'[\\u0591-\\u05BD\\u05BF-\\u05C2\\u05C4-\\u05C7]', '', p)\n","\n","    filtered = p.replace(\"\\n\", \" \")\n","    filtered = filtered.replace(\"\\u2009\", \" \")\n","    filtered = filtered.replace(\"\\u200f[1]\", \" \")\n","    \n","    # Split in colon to source and target.\n","    source_raw, target_raw = filtered.split(\"׃\")\n","    source_list = source_raw.split(\" \")\n","    target_list = target_raw.split(\" \")\n","\n","    # Reverse each list.\n","    source_list.reverse()\n","    target_list.reverse()\n","    source_list = clean_sentence(source_list)\n","    target_list = clean_sentence(target_list)\n","\n","    # Add words to the word sets.\n","    src_vocab_set.update(source_list)\n","    trg_vocab_set.update(target_list)\n","\n","    wcount += len(source_list)\n","\n","    # Add to the global sentence lists.\n","    src_sentences_list.extend([source_list])\n","    tgt_sentences_list.extend([target_list])\n","\n","# Processes all the books, make sure that the number of source sentences is equal to the number of target sentences.\n","N_samples = len(src_sentences_list)\n","assert len(src_sentences_list) == len(tgt_sentences_list)\n","# Split to train set and test set.\n","# Shuffle.\n","temp = list(zip(src_sentences_list, tgt_sentences_list))\n","# random.shuffle(temp) # REMOVED SINCE WE SHUFFLE LATER\n","src_sentences_list, tgt_sentences_list = zip(*temp)\n","\n","# training data\n","train_src_sentences_list = src_sentences_list[:int(0.8*N_samples)]\n","train_trg_sentences_list = tgt_sentences_list[:int(0.8*N_samples)]\n","# validation\n","val_src_sentences_list = src_sentences_list[int(0.8*N_samples):int(0.9*N_samples)]\n","val_trg_sentences_list = tgt_sentences_list[int(0.8*N_samples):int(0.9*N_samples)]\n","# test data\n","test_src_sentences_list = src_sentences_list[-int(0.1*N_samples):]\n","test_trg_sentences_list = tgt_sentences_list[-int(0.1*N_samples):]\n","\n","# filtering\n","MAX_SENT_LENGTH = 48\n","MAX_SENT_LENGTH_PLUS_SOS_EOS = 50\n","\n","# show_some_data_stats(train_src_sentences_list, val_src_sentences_list, \n","#                      test_src_sentences_list, train_trg_sentences_list,\n","#                      list(src_vocab_set), list(trg_vocab_set))\n","\n","\n","# test_src_sentences_list = read_sentence_file(\"tst2013.vi\")\n","# test_trg_sentences_list = read_sentence_file(\"tst2013.en\")\n","# assert len(test_src_sentences_list) == len(test_trg_sentences_list)\n","\n","# # Filter out sentences over 48 words long\n","# MAX_SENT_LENGTH = 48\n","# MAX_SENT_LENGTH_PLUS_SOS_EOS = 50\n","\n","# train_src_sentences_list, train_trg_sentences_list = filter_data(\n","#     train_src_sentences_list, train_trg_sentences_list, MAX_SENT_LENGTH)\n","# test_src_sentences_list, test_trg_sentences_list = filter_data(\n","#     test_src_sentences_list, test_trg_sentences_list, MAX_SENT_LENGTH)\n","\n","# # We take 10% of training data as validation set.\n","# num_val = int(len(train_src_sentences_list) * 0.1)\n","# val_src_sentences_list = train_src_sentences_list[:num_val]\n","# val_trg_sentences_list = train_trg_sentences_list[:num_val]\n","# train_src_sentences_list = train_src_sentences_list[num_val:]\n","# train_trg_sentences_list = train_trg_sentences_list[num_val:]\n","\n","# show_some_data_stats(train_src_sentences_list, val_src_sentences_list, \n","#                      test_src_sentences_list, train_trg_sentences_list,\n","#                      src_vocab_set, trg_vocab_set)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JICv-riyYfFD"},"source":["# Create a csv of"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"la-lRo23slb6"},"source":["## *DATASET* CLASS"]},{"cell_type":"code","metadata":{"id":"7DxhA9IlWxxc"},"source":["import torch\n","from torch.utils import data\n","\n","# These IDs are reserved.\n","PAD_INDEX = 0\n","UNK_INDEX = 1\n","SOS_INDEX = 2\n","EOS_INDEX = 3\n","\n","\n","class MTDataset(data.Dataset):\n","  def __init__(self, src_sentences, src_vocabs, trg_sentences, trg_vocabs,\n","               sampling=1.):\n","    self.src_sentences = src_sentences[:int(len(src_sentences) * sampling)]\n","    self.trg_sentences = trg_sentences[:int(len(src_sentences) * sampling)]\n","\n","    self.max_src_seq_length = MAX_SENT_LENGTH_PLUS_SOS_EOS\n","    self.max_trg_seq_length = MAX_SENT_LENGTH_PLUS_SOS_EOS\n","\n","    self.src_vocabs = src_vocabs\n","    self.trg_vocabs = trg_vocabs\n","\n","    self.src_v2id = {v : i for i, v in enumerate(src_vocabs)}\n","    self.src_id2v = {val : key for key, val in self.src_v2id.items()}\n","    self.trg_v2id = {v : i for i, v in enumerate(trg_vocabs)}\n","    self.trg_id2v = {val : key for key, val in self.trg_v2id.items()}\n","\n","\n","  def __len__(self):\n","    return len(self.src_sentences)\n","\n","  def __getitem__(self, index):\n","    src_sent = self.src_sentences[index]\n","    src_len = len(src_sent) + 2   # add <s> and </s> to each sentence\n","    src_id = []\n","    for w in src_sent:\n","      if w not in self.src_vocabs:\n","        w = '<unk>'\n","      src_id.append(self.src_v2id[w])\n","    src_id = ([SOS_INDEX] + src_id + [EOS_INDEX] + [PAD_INDEX] *\n","              (self.max_src_seq_length - src_len))\n","\n","    trg_sent = self.trg_sentences[index]\n","    trg_len = len(trg_sent) + 2\n","    trg_id = []\n","    for w in trg_sent:\n","      if w not in self.trg_vocabs:\n","        w = '<unk>'\n","      trg_id.append(self.trg_v2id[w])\n","    trg_id = ([SOS_INDEX] + trg_id + [EOS_INDEX] + [PAD_INDEX] *\n","              (self.max_trg_seq_length - trg_len))\n","\n","    return torch.tensor(src_id), src_len, torch.tensor(trg_id), trg_len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6ouIoPg8QA4b"},"source":["#export as pandas data frame\n","# import pandas as pd \n","# df_1 = pd.DataFrame({\"input_sentence\":train_src_sentences_list,\n","#                      \"target_sentences\":train_trg_sentences_list, \n","\n","#                      })\n","# df_1[\"data_type\"] = \"test\"\n","\n","# df_2 = pd.DataFrame({\n","\n","#                      \"input_sentence\": val_src_sentences_list,\n","#                      \"target_sentences\":val_trg_sentences_list\n","#                      })\n","# df_2[\"data_type\"] = \"val\"\n","# pd.concat([df_1, df_2]).to_pickle(\"data.pkl\")\n","# # train_src_sentences_list\n","# # src_vocab_set\n","# # train_trg_sentences_list\n","# # trg_vocab_set\n","# # val_src_sentences_list\n","# # val_trg_sentences_list\n","# print(len(trg_vocab_set))\n","# print(len(src_vocab_set))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T--HH6OHteKv"},"source":["## Data Loading into data structures."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M8HSNjghtE0x","executionInfo":{"status":"ok","timestamp":1620999505934,"user_tz":240,"elapsed":553,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"be75c410-d316-4412-b6aa-8aac9f734905"},"source":["from torch.utils import data\n","\n","batch_size = 128 # TODO -> tweak\n","\n","train_src_sentences_list\n","src_vocab_set\n","train_trg_sentences_list\n","trg_vocab_set\n","val_src_sentences_list\n","val_trg_sentences_list\n","\n","src_vocab_set = ['<pad>'] + ['<unk>'] + ['<s>'] + ['</s>'] + list(src_vocab_set)\n","trg_vocab_set = ['<pad>'] + ['<unk>'] + ['<s>'] + ['</s>'] + list(trg_vocab_set)\n","\n","\n","# You can try on a smaller training set by setting a smaller `sampling`.\n","train_set = MTDataset(train_src_sentences_list, src_vocab_set,\n","                      train_trg_sentences_list, trg_vocab_set, sampling=1.)\n","train_data_loader = data.DataLoader(train_set, batch_size=batch_size,\n","                                    num_workers=8, shuffle=True)\n","\n","val_set = MTDataset(val_src_sentences_list, list(src_vocab_set),\n","                    val_trg_sentences_list, list(trg_vocab_set), sampling=1.)\n","val_data_loader = data.DataLoader(val_set, batch_size=batch_size, num_workers=8,\n","                                  shuffle=False)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:477: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"N1odVqT5gYeI"},"source":["## Further cleaning of the data."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qGHlnoVYgcUh","executionInfo":{"status":"ok","timestamp":1620999508056,"user_tz":240,"elapsed":1997,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"4996f789-1cc5-4920-8a82-0d7a494b6781"},"source":["import pandas as pd\n","\n","df_train = pd.DataFrame({\"src\":train_src_sentences_list, \"target\":train_trg_sentences_list })\n","df_val = pd.DataFrame({\"src\":val_src_sentences_list, \"target\":val_trg_sentences_list })\n","df_test =  pd.DataFrame({\"src\":test_src_sentences_list, \"target\":test_trg_sentences_list })\n","\n","df = pd.concat([df_val, df_train, df_test]).sample(frac=1, random_state=42).reset_index().drop(columns=[\"index\"])\n","# proportions 80/10/10\n","df[\"data_type\"] = \"train\"\n","df.iloc[:922, -1] = \"test\"\n","\n","df.iloc[923:922*2, -1] = \"val\"\n","\n","print(df.data_type.value_counts())\n","df[\"src\"] = df[\"src\"].apply(lambda x: \" \".join(x))\n","df[\"target\"] = df[\"target\"].apply(lambda x: \" \".join(x))\n","df = df.replace({\"\\[.*\\]\": \"\"}, regex=True) \n","df = df.replace({\"\\(.*\\)\": \"\"}, regex=True)\n","\n","\n","replace_vals = {'!': \"\",\n","                ' ': \" \",\n","                \"  \": \" \",\n","                '\"': \"\",\n","                ')': \"\",\n","                '\\u3000': \" \",\n","                '(': \"\",\n","                ';': \"\",\n","                '\\xad': \" \", # Is this a space??\n","                '·': \"\", # CHECK THIS\n","                '?': \"\",\n","                ']': \"\",\n","                '–': \" \",\n","                '\\u200f':\"\",\n","                '-': \" \",\n","                ':': \"\",\n","                ',': \"\",\n","                '[': \"\",\n","                '\\u2009': \" \",\n","                \"'\":\"\",\n","                '\\u2003':\" \"}\n","\n","\n","replace_vals = {'!': \"\",\n","                \"ה'\": \"יהוה\", # REPLACE HASHEM'S NAME\n","                # ' ': \" \",\n","                \"  \": \" \",\n","                '\"': \"\",\n","                '\\)': \"\",\n","                '\\u3000': \" \",\n","                '\\(': \"\",\n","                ';': \"\",\n","                '\\xad': \" \", # Is this a space??\n","                '·': \"\", # CHECK THIS\n","                '\\?': \"\",\n","                '\\]': \"\",\n","                '–': \" \",\n","                '\\u200f':\"\",\n","                '-': \" \",\n","               \"־\": \" \",\n","                ':': \"\",\n","                ',': \"\",\n","                '\\[': \"\",\n","                '\\u2009': \" \",\n","                # \"'\":\"\",\n","                '\\u2003':\" \"\n","                }\n","\n","df = df.replace(replace_vals, regex=True)\n","df = df.replace({\"  \":\" \", \"'\":\"\"}, regex=True) # remove double spaces\n","df.to_pickle(\"train_test_val.pkl\")\n","# pd.read_pickle(\"train_test_val.pkl\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["train    7379\n","test      922\n","val       921\n","Name: data_type, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":66},"id":"X64FxmblNkTB","executionInfo":{"status":"ok","timestamp":1620999508408,"user_tz":240,"elapsed":400,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"3d8806a5-adc9-40f0-9b2f-efe1e02b382e"},"source":["val = '\\u3000'\n","display(df.loc[df[\"target\"].str.contains(val), \"target\"].values)\n","display(df.loc[df[\"src\"].str.contains(val), [\"src\"]].replace({val:\"@\"}, regex=True))"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["array([], dtype=object)"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>src</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Empty DataFrame\n","Columns: [src]\n","Index: []"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"Vn4goeLageSC"},"source":["## Show some examples."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"aXFzutqGg-lg","executionInfo":{"status":"ok","timestamp":1620999615094,"user_tz":240,"elapsed":574,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"fac9cce6-5ff2-4d1c-eb70-fbad5795978f"},"source":["\n","for i in range(50):\n","  print(df.iloc[i,0])\n","  print(df.iloc[i,1])\n","  print(\"-\"*8)\n","\n","# from google.colab import files\n","# files.download('train_test_val.pkl') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["וַיִּֽהְיוּ שָֽׁם שְׂדֵֽי מוֹאָ֖ב וַיָּבֹ֥אוּ יְהוּדָ֑ה לֶ֖חֶם מִבֵּ֥ית אֶפְרָתִ֔ים וְכִלְיוֹן֙ מַחְל֤וֹן שְׁנֵֽי בָנָ֣יו וְשֵׁ֥ם נׇעֳמִ֜י אִשְׁתּ֨וֹ וְשֵׁם֩ אֱֽלִימֶ֡לֶךְ הָאִ֣ישׁ וְשֵׁ֣ם\n","שָׁם וְנִשְׁאֲרוּ מוֹאָב לְאֶרֶץ בָּאוּ הֵם שֶׁבִּיהוּדָה לֶחֶם בֵּית הִיא אֶפְרָת מֵהָעִיר הָיוּ הֵם וְכִלְיוֹן מַחְלוֹן בָּנָיו שְׁנֵי וְשֵׁם נָעֳמִי אִשְׁתּוֹ וְשֵׁם אֱלִימֶלֶךְ הָיָה הָאִישׁ שֵׁם\n","--------\n","הַתֶּֽבֶן בִּהְי֥וֹת כַּאֲשֶׁ֖ר בְּיוֹמ֔וֹ דְּבַר י֣וֹם מַעֲשֵׂיכֶם֙ כַּלּ֤וּ לֵאמֹ֑ר אָצִ֣ים וְהַנֹּגְשִׂ֖ים\n","הַקַּשׁ אֶת שֶׁקִּבַּלְתֶּם בַּזְּמַן יוֹם בְּכָל שֶׁעֲשִׂיתֶם כְּמוֹ מַעֲשֵׂיכֶם אֶת הַשְׁלִימוּ וְאוֹמְרִים בָּהֶם מְאִיצִים הַמִּצְרִים וְהַשּׁוֹטְרִים\n","--------\n","וָמַֽשׁ וְגֶ֥תֶר וְח֖וּל ע֥וּץ אֲרָ֑ם וּבְנֵ֖י\n","וּמַשׁ וְגֶתֶר וְחוּל עוּץ אֲרָם וּבְנֵי\n","--------\n","סָבִֽיב הַמִּזְבֵּ֖חַ עַל קַרְנ֥וֹת וְנָתַ֛ן הַשָּׂעִ֔יר וּמִדַּ֣ם הַפָּר֙ מִדַּ֤ם וְלָקַ֞ח עָלָ֑יו וְכִפֶּ֣ר לִפְנֵֽי יְהֹוָ֖ה אֲשֶׁ֥ר אֶל הַמִּזְבֵּ֛חַ וְיָצָ֗א\n","מִסָּבִיב הַמִּזְבֵּחַ פִּנּוֹת עַל וְיָשִׂים הַתַּיִשׁ וּמִדַּם הַפָּר מִדַּם וְיִקַּח לְכַפֵּר כְּדֵי עָלָיו וְיַתִּיז יהוה שֶׁלִּפְנֵי לַמִּזְבֵּחַ יֵצֵא הוּא\n","--------\n","תְעוֹנֵֽנוּ וְלֹ֥א תְנַחֲשׁ֖וּ לֹ֥א עַל הַדָּ֑ם תֹאכְל֖וּ לֹ֥א\n","עֵינַיִם תֹּאחֲזוּ וְאַל תְּכַשְּׁפוּ אַל הַדָּם עִם בְּעוֹדוֹ בָּשָׂר תֹּאכְלוּ אַל\n","--------\n","מִן הַשָּׁמָֽיִם הַגֶּ֖שֶׁם וַיִּכָּלֵ֥א הַשָּׁמָ֑יִם וַֽאֲרֻבֹּ֖ת תְּה֔וֹם מַעְיְנֹ֣ת וַיִּסָּֽכְרוּ֙\n","פָּסַק מֵהַשָּׁמַיִם וְהַגֶּשֶׁם נִסְגְּרוּ הַשָּׁמַיִם וַאֲרֻבּוֹת הַתְּהוֹם מַעַיְנוֹת\n","--------\n","בְּעֵינָֽי חֵ֖ן וְגַם מָצָ֥אתָ בְשֵׁ֔ם יְדַעְתִּ֣יךָֽ אָמַ֙רְתָּ֙ וְאַתָּ֤ה עִמִּ֑י אֲשֶׁר תִּשְׁלַ֖ח אֵ֥ת הֽוֹדַעְתַּ֔נִי לֹ֣א וְאַתָּה֙ הַזֶּ֔ה אֶת הָעָ֣ם הַ֚עַל אֵלַי֙ אֹמֵ֤ר אַתָּ֞ה רְ֠אֵ֠ה אֶל יְהֹוָ֗ה מֹשֶׁ֜ה וַיֹּ֨אמֶר\n","בְּעֵינַי חֵן מָצָאתָ וְגַם הַמְּיוּחָד בִּשְׁמִי אֵלֶיךָ אֶתְגַּלֶּה אָמַרְתָּ לְהֵפֶךְ מַלְאָךְ רַק אִתִּי שֶׁתִּשְׁלַח לִי הוֹדַעְתָּ וְלֹא לָאָרֶץ הַזֶּה הָעָם אֶת הַעֲלֶה לִי אוֹמֵר אַתָּה רְאֵה לַיהוה אָמַר מֹשֶׁה\n","--------\n","וְכִלְשׁוֹנָֽם כִּכְתָבָ֖ם וְאֶ֨ל הַיְּהוּדִ֔ים כִּלְשֹׁנ֑וֹ וָעָ֖ם וְעַ֥ם כִּכְתָבָ֔הּ וּמְדִינָה֙ מְדִינָ֤ה מְדִינָ֔ה וּמֵאָה֙ וְעֶשְׂרִ֤ים שֶׁ֣בַע וְעַד כּ֗וּשׁ מֵהֹ֣דּוּ אֲשֶׁ֣ר הַמְּדִינ֜וֹת וְשָׂרֵ֨י הָאֲחַשְׁדַּרְפְּנִֽים וְהַפַּחוֹת֩ וְאֶ֣ל אֶל הַיְּהוּדִ֡ים מׇרְדֳּכַ֣י כְּֽכׇל אֲשֶׁר צִוָּ֣ה וַיִּכָּתֵ֣ב בּוֹ֒ וְעֶשְׂרִים֮ בִּשְׁלוֹשָׁ֣ה סִיוָ֗ן הוּא חֹ֣דֶשׁ הַשְּׁלִישִׁ֜י בַּחֹ֨דֶשׁ בָּֽעֵת הַ֠הִ֠יא סֹפְרֵֽי הַמֶּ֣לֶךְ וַיִּקָּרְא֣וּ\n","וּבִשְׂפָתָם בִּכְתָבָם הַיְּהוּדִים וְאֶל בִּשְׂפָתוֹ וְעַם עַם וּלְכָל בִּכְתָבָהּ וּמְדִינָה מְדִינָה לְכָל מְדִינוֹת וְשֶׁבַע וְעֶשְׂרִים מֵאָה כּוּשׁ וְעַד שֶׁמֵּהוֹדּוּ הַמְּדִינוֹת וְשָׂרֵי וְהַמּוֹשְׁלִים הַנְּצִיבִים וְאֶל הַיְּהוּדִים אֶל מָרְדֳּכַי שֶּׁצִּוָּה מַה כָּל אֶת וְכָתְבוּ סִיוָן חוֹדֶשׁ הוּא הַשְּׁלִישִׁי בַּחוֹדֶשׁ כג בְּיוֹם אָז הֻזְמְנוּ הַמֶּלֶךְ סוֹפְרֵי\n","--------\n","כְּנָֽעַן מִבְּנ֥וֹת אִשָּׁ֖ה לֹֽא תִקַּ֥ח לֵאמֹ֔ר עָלָיו֙ וַיְצַ֤ו אֹת֔וֹ בְּבָרְכ֣וֹ אִשָּׁ֑ה מִשָּׁ֖ם לָקַֽחַת ל֥וֹ אֲרָ֔ם פַּדֶּ֣נָֽה אֹתוֹ֙ וְשִׁלַּ֤ח אֶֽת יַעֲקֹב֒ יִצְחָק֮ כִּֽי בֵרַ֣ךְ עֵשָׂ֗ו וַיַּ֣רְא\n","כְּנַעַן מִבְּנוֹת אִשָּׁה תִּקַּח אַל וְאָמַר עָלָיו צִוָּה אוֹתוֹ וּכְשֶׁבֵּרֵךְ אִשָּׁה מִשָּׁם לוֹ לָקַחַת אֲרָם לְפַדַּן אוֹתוֹ וְשָׁלַח יַעֲקֹב אֶת בֵּרֵךְ שֶׁיִּצְחָק רָאָה עֵשָׂו\n","--------\n","בְּמַקְהֵלֹֽת וַֽיַּחֲנ֖וּ מֵחֲרָדָ֑ה וַיִּסְע֖וּ\n","בְּמַקְהֵלוֹת וְחָנוּ מֵחֲרָדָה נָסְעוּ הֵם\n","--------\n","יַֽהַרְגֵֽנִי כׇל מֹצְאִ֖י וְהָיָ֥ה בָּאָ֔רֶץ וָנָד֙ נָ֤ע וְהָיִ֜יתִי אֶסָּתֵ֑ר וּמִפָּנֶ֖יךָ הָֽאֲדָמָ֔ה פְּנֵ֣י מֵעַל֙ הַיּ֗וֹם אֹתִ֜י גֵּרַ֨שְׁתָּ הֵן֩\n","אוֹתִי יַהֲרוֹג אוֹתִי שֶׁיִּמְצָא מִי וְכָל בָּאָרֶץ וְנַוָּד גּוֹלֶה וְאֶהְיֶה לְהִסְתַּתֵּר יָכוֹל אֵינִי וּמִפָּנֶיךָ הָאֲדָמָה פְּנֵי מֵעַל הַיּוֹם אוֹתִי גֵּרַשְׁתָּ הֲרֵי\n","--------\n","יִנְחָֽלוּ מַטּוֹת אֲבֹתָ֖ם לִשְׁמ֥וֹת אֶת הָאָ֑רֶץ יֵחָלֵ֖ק אַךְ בְּגוֹרָ֕ל\n","אֲבוֹתֵיהֶם שִׁבְטֵי שֶׁיִּנְחֲלוּ הַמָּקוֹם יִקָּבַע בַּגּוֹרָל שֶׁיַּעֲלוּ הַשֵּׁמוֹת לְפִי בְּגוֹרָל תִּתְחַלֵּק הָאָרֶץ אֲבָל\n","--------\n","גֹּֽשֶׁן בְּאֶ֥רֶץ עָזְב֖וּ וּבְקָרָ֔ם וְצֹאנָ֣ם טַפָּם֙ רַ֗ק אָבִ֑יו וּבֵ֣ית וְאֶחָ֖יו יוֹסֵ֔ף בֵּ֣ית וְכֹל֙\n","גּוֹשֶׁן בְּאֶרֶץ הִשְׁאִירוּ הֵם וּבְקָרָם וְצֹאנָם יַלְדֵיהֶם אֶת רַק אָבִיו וּמִשְׁפַּחַת וְאֶחָיו יוֹסֵף מִשְׁפַּחַת וְכָל\n","--------\n","יְהֹוָֽה אָנֹכִ֖י הֲלֹ֥א עִוֵּ֑ר א֣וֹ פִקֵּ֖חַ א֥וֹ חֵרֵ֔שׁ א֣וֹ אִלֵּ֔ם מִֽי יָשׂ֣וּם א֚וֹ לָֽאָדָם֒ פֶּה֮ שָׂ֣ם מִ֣י אֵלָ֗יו יְהֹוָ֜ה וַיֹּ֨אמֶר\n","יהוה אֲנִי רַק הֲרֵי עִוֵּר אוֹ רוֹאֶה אוֹ חֵרֵשׁ אוֹ אִלֵּם בָּרָא מִי אוֹ לָאָדָם פֶּה שָׂם מִי לוֹ אָמַר יהוה\n","--------\n","אֲלֵיהֶֽן נָבֹ֖א אֲשֶׁ֥ר הֶֽעָרִ֔ים וְאֵת֙ נַעֲלֶה בָּ֔הּ אֲשֶׁ֣ר אֶת הַדֶּ֙רֶךְ֙ דָּבָ֔ר אֹתָ֙נוּ֙ וְיָשִׁ֤בוּ אֶת הָאָ֑רֶץ וְיַחְפְּרוּ לָ֖נוּ לְפָנֵ֔ינוּ אֲנָשִׁים֙ נִשְׁלְחָ֤ה וַתֹּאמְר֗וּ כֻּלְּכֶם֒ אֵלַי֮ וַתִּקְרְב֣וּן שלישי\n","אֲלֵיהֶן שֶׁנָּבוֹא הֶעָרִים וְעַל בָּהּ שֶׁנַּעֲלֶה הַדֶּרֶךְ עַל תְּשׁוּבוֹת לָנוּ וְיַחֲזִירוּ בָּאָרֶץ עֲבוּרֵנוּ וִירַגְּלוּ שֶׁיְּחַפְּשׂוּ לְפָנֵינוּ אֲנָשִׁים נִשְׁלַח וַאֲמַרְתֶּם כֻּלְּכֶם אֵלַי נִגַּשְׁתֶּם\n","--------\n","לַגְּמַלִּֽים וּמָק֖וֹם הַבַּ֔יִת פִּנִּ֣יתִי וְאָנֹכִי֙ בַּח֔וּץ תַעֲמֹד֙ לָ֤מָּה יְהֹוָ֑ה בְּר֣וּךְ בּ֖וֹא וַיֹּ֕אמֶר\n","לַגְּמַלִּים מָקוֹם וְהֵכַנְתִּי הַבַּיִת אֶת עֲבוּרְכֶם פִּנִּיתִי אֲנִי הֲרֵי בַּחוּץ תַּעֲמוֹד לָמָּה מֵיהוה הַמְּבוֹרָךְ בּוֹא לוֹ אָמַר\n","--------\n","הָאֲדָמָֽה עַל פְּנֵ֥י אֲשֶׁ֖ר הָֽאָדָ֔ם מִכֹּל֙ מְאֹ֑ד עָנָ֣ו מֹשֶׁ֖ה וְהָאִ֥ישׁ\n","הָאֲדָמָה פְּנֵי שֶׁעַל הָאָדָם מִכָּל יוֹתֵר מְאוֹד עָנָיו מֹשֶׁה וְהָאִישׁ\n","--------\n","רָאָֽה לֹ֥א אֲדֹנָ֖י בְּרִיב֔וֹ אָדָם֙ לְעַוֵּ֤ת\n","רָאָה לֹא יהוה כְּאִלּוּ בְּטַעֲנָתוֹ אָדָם מִשְׁפַּט לְעַוֵּת\n","--------\n","לָֽךְ ה֖וּא כִּֽי מוֹקֵ֥שׁ אֶת אֱלֹ֣הֵיהֶ֔ם תַעֲבֹד֙ וְלֹ֤א עֲלֵיהֶ֑ם עֵֽינְךָ֖ לֹא תָח֥וֹס לָ֔ךְ נֹתֵ֣ן אֱלֹהֶ֙יךָ֙ יְהֹוָ֤ה אֲשֶׁ֨ר אֶת כׇּל הָֽעַמִּ֗ים וְאָכַלְתָּ֣\n","עֲבוּרְךָ מַלְכּוֹדֶת הֵם כִּי אֱלֹהֵיהֶם אֶת תַּעֲבוֹד וְאַל עֲלֵיהֶם תְּרַחֵם אַל לְךָ נוֹתֵן אֱלֹהֶיךָ שֶׁיהוה הָעַמִּים כָּל אֶת תִּכְבּוֹשׁ אַתָּה\n","--------\n","צָעִֽיר יַעֲבֹ֥ד וְרַ֖ב יֶֽאֱמָ֔ץ מִלְאֹ֣ם וּלְאֹם֙ יִפָּרֵ֑דוּ מִמֵּעַ֖יִךְ לְאֻמִּ֔ים וּשְׁנֵ֣י בְּבִטְנֵ֔ךְ גוֹיִם֙ גיים שְׁנֵ֤י לָ֗הּ יְהֹוָ֜ה וַיֹּ֨אמֶר\n","הַצָּעִיר אֶת יַעֲבוֹד וְהַגָּדוֹל הָאַחֵר מֵהָעָם חָזָק יִהְיֶה אֶחָד עַם מִתּוֹכֵךְ יִפָּרְדוּ עַמִּים וּשְׁנֵי בְּבִטְנֵךְ עַמִּים שְׁנֵי יֵשׁ לָהּ אָמַר יהוה\n","--------\n","הַֽמַּחֲנֶֽה אֶל תּ֥וֹךְ יָבֹ֖א הַשֶּׁ֔מֶשׁ וּכְבֹ֣א בַּמָּ֑יִם יִרְחַ֣ץ לִפְנֽוֹת עֶ֖רֶב וְהָיָ֥ה\n","הַמַּחֲנֶה לְתוֹךְ לָבוֹא יוּכַל הַשֶּׁמֶשׁ וּבִשְׁקִיעַת בְּמַיִם יִטְבּוֹל הוּא עֶרֶב לִפְנוֹת\n","--------\n","הֵֽם יִשְׂרָאֵ֖ל אַלְפֵ֥י רָאשֵׁ֛י אֲבוֹתָ֑ם מַטּ֣וֹת נְשִׂיאֵ֖י הָעֵדָ֔ה קְרוּאֵ֣י קריאי אֵ֚לֶּה\n","יִשְׂרָאֵל בְּנֵי אַלְפֵי רָאשֵׁי הֵם אֲבוֹתֵיהֶם שִׁבְטֵי נְשִׂיאֵי לִסְפּוֹר מֵהַצִּבּוּר הַמֻּזְמָנִים הֵם אֵלֶּה\n","--------\n","כַּמָּֽיִם תִּשְׁפְּכֶ֖נּוּ עַל הָאָ֥רֶץ תֹאכֵ֑ל לֹ֣א אֶת דָּמ֖וֹ רַ֥ק\n","מַיִם כְּמוֹ לָאָרֶץ אוֹתוֹ שְׁפוֹךְ אֶלָּא דָּמוֹ אֶת תֹּאכַל אַל רַק\n","--------\n","אֶתְכֶֽם נַפְשִׁ֖י וְלֹֽא תִגְעַ֥ל בְּתוֹכְכֶ֑ם מִשְׁכָּנִ֖י וְנָתַתִּ֥י\n","אֶתְכֶם תִּדְחֶה לֹא וְנַפְשִׁי בְּתוֹכְכֶם שְׁכִינָתִי אֶת אַשְׁרֶה\n","--------\n","וְתִרְצָֽה וּמִלְכָּ֖ה וְחׇגְלָ֥ה נֹעָ֔ה מַחְלָ֣ה בְּנֹתָ֔יו שְׁמ֣וֹת וְאֵ֙לֶּה֙ בֶן יוֹסֵ֑ף מְנַשֶּׁ֣ה לְמִשְׁפְּחֹ֖ת בֶּן מְנַשֶּׁ֔ה בֶּן מָכִ֣יר בֶּן גִּלְעָד֙ בֶּן חֵ֤פֶר צְלׇפְחָ֗ד בְּנ֣וֹת וַתִּקְרַ֜בְנָה\n","וְתִרְצָה וּמִלְכָּה וְחָגְלָה נוֹעָה מַחְלָה בְּנוֹתָיו שְׁמוֹת וְאֵלֶּה נִגְּשׁוּ יוֹסֵף בֶּן מְנַשֶּׁה מִמִּשְׁפְּחוֹת מְנַשֶּׁה בֶּן מָכִיר בֶּן גִּלְעָד בֶּן חֵפֶר בֶּן צְלָפְחָד בְּנוֹת\n","--------\n","הַזֶּֽה עַד הַיּ֥וֹם מֵעוֹדִ֖י אֹתִ֔י הָרֹעֶ֣ה הָֽאֱלֹהִים֙ וְיִצְחָ֔ק אַבְרָהָ֣ם לְפָנָיו֙ אֲבֹתַ֤י הִתְהַלְּכ֨וּ אֲשֶׁר֩ הָֽאֱלֹהִ֡ים וַיֹּאמַ֑ר אֶת יוֹסֵ֖ף וַיְבָ֥רֶךְ\n","הַזֶּה הַיּוֹם עַד מִנְּעוּרַי אוֹתִי שֶׁמַּנְהִיג הָאֱלֹהִים בִּדְרָכָיו הִתְהַלְּכוּ וְיִצְחָק אַבְרָהָם שֶׁאֲבוֹתַי הָאֱלֹהִים וְאָמַר יוֹסֵף אֶת בֵּרֵךְ הוּא\n","--------\n","אֶת מֹשֶֽׁה יְהֹוָ֖ה צִוָּ֥ה כַּאֲשֶׁ֛ר הַקֹּ֔דֶשׁ נֵ֣זֶר הַזָּהָב֙ צִ֤יץ אֵ֣ת פָּנָ֗יו אֶל מ֣וּל עַֽל הַמִּצְנֶ֜פֶת וַיָּ֨שֶׂם עַל רֹאשׁ֑וֹ אֶת הַמִּצְנֶ֖פֶת וַיָּ֥שֶׂם\n","מֹשֶׁה אֶת צִוָּה שֶׁיהוה כְּמוֹ הַקּוֹדֶשׁ כֶּתֶר הַזָּהָב צִיץ אֶת חוּץ כְּלַפֵּי הַמִּצְנֶפֶת עַל וְשָׂם רֹאשׁוֹ עַל הַמִּצְנֶפֶת אֶת שָׂם הוּא\n","--------\n","עֲבָדִֽים מִבֵּ֥ית מִמִּצְרַ֖יִם יְהֹוָ֛ה הוֹצִיאָ֧נוּ יָ֗ד בְּחֹ֣זֶק אֵלָ֔יו וְאָמַרְתָּ֣ מַה זֹּ֑את לֵאמֹ֣ר מָחָ֖ר בִנְךָ֛ כִּֽי יִשְׁאָלְךָ֥ וְהָיָ֞ה מפטיר\n","חֲזָקָה בְּיָד עֲבָדִים מִבֵּית מִמִּצְרַיִם אוֹתָנוּ הוֹצִיא יהוה לוֹ תֹּאמַר זֶּה מַה וְיֹאמַר מָחָר אוֹתְךָ יִשְׁאַל וּכְשֶׁבִּנְךָ\n","--------\n","הִֽוא אִשְׁתְּךָ֖ כִּ֥י לִּ֔י לֹא הִגַּ֣דְתָּ לָ֚מָּה לִּ֑י עָשִׂ֣יתָ מַה זֹּ֖את וַיֹּ֕אמֶר לְאַבְרָ֔ם פַרְעֹה֙ וַיִּקְרָ֤א\n","אִשְׁתְּךָ שֶׁהִיא לִי סִפַּרְתָּ לֹא לָמָּה לִי עָשִׂיתָ זֶּה מַה וְאָמַר לְאַבְרָם קָרָא פַּרְעֹה\n","--------\n","לֵאמֹֽר וְאֶֽל אַהֲרֹ֖ן אֶל מֹשֶׁ֥ה יְהֹוָ֔ה וַיְדַבֵּ֣ר\n","וְאָמַר אַהֲרֹן וְאֶל מֹשֶׁה אֶל דִּבֵּר יהוה\n","--------\n","אָֽלֶף וּשְׁלֹשִׁ֖ים שִׁשָּׁ֥ה וּבָקָ֕ר\n","אֶלֶף וְשִׁשָּׁה שְׁלוֹשִׁים וּבָקָר\n","--------\n","עַד הָעָֽרֶב וְטָמֵ֥א בַּמַּ֖יִם וְרָחַ֥ץ בְּגָדָ֛יו יְכַבֵּ֧ס אוֹתָ֔ם וְהַנּוֹשֵׂ֣א עַד הָעָ֑רֶב יִטְמָ֖א תַחְתָּ֔יו יִהְיֶ֣ה אֲשֶׁ֣ר בְּכֹל֙ וְכׇל הַנֹּגֵ֗עַ\n","הָעֶרֶב עַד טָמֵא וְיִהְיֶה בְּמַיִם וְיִטְבּוֹל בְּגָדָיו אֶת יַטְבִּיל אוֹתָם שֶׁמֵּרִים וּמִי הָעֶרֶב עַד יִטְמָא לַזָּב מִתַּחַת שֶׁהָיָה דָּבָר בְּכָל הַנּוֹגֵעַ וְכָל\n","--------\n","מִמֶּֽנּוּ וָרָ֖ב לְגוֹי עָצ֥וּם אֽוֹתְךָ֔ וְאֶֽעֱשֶׂה֙ הַשָּׁמָ֑יִם מִתַּ֖חַת אֶת שְׁמָ֔ם וְאֶמְחֶ֣ה וְאַשְׁמִידֵ֔ם מִמֶּ֙נִּי֙ הֶ֤רֶף\n","מֵהֶם יוֹתֵר וְגָדוֹל עָצוּם עַם מִמְּךָ וְאֶעֱשֶׂה לַשָּׁמַיִם מִתַּחַת שְׁמָם אֶת וְאֶמְחוֹק אוֹתָם וְאַשְׁמִיד אוֹתִי עֲזוֹב\n","--------\n","מְעַטִּֽים דְבָרֶ֖יךָ יִהְי֥וּ עַל כֵּ֛ן עַל הָאָ֔רֶץ וְאַתָּ֣ה בַּשָּׁמַ֙יִם֙ הָאֱלֹהִ֤ים כִּ֣י הָאֱלֹהִ֑ים לִפְנֵ֣י דָבָ֖ר לְהוֹצִ֥יא אַל יְמַהֵ֛ר וְלִבְּךָ֧ עַל פִּ֜יךָ אַל תְּבַהֵ֨ל\n","מְעַטִּים דִּבּוּרֶיךָ שֶׁיִּהְיוּ טוֹב לָכֵן הָאָרֶץ עַל רַק וְאַתָּה מֵהַשָּׁמַיִם שׁוֹלֵט הָאֱלֹהִים כִּי הָאֱלֹהִים נֶגֶד דִּבּוּר שֶׁיֵּצֵא בְּמַחְשַׁבְתְּךָ תְּמַהֵר וְאַל בְּפִיךָ פָּזִיז תִּהְיֶה אַל\n","--------\n","אֶת הַקֶּֽרֶב הַֽמְכַסֶּ֥ה וְאֶת הַחֵ֖לֶב הָֽאַלְיָ֔ה אֵ֚ת מִמֶּ֑נּוּ יַקְרִ֣יב כׇּל חֶלְבּ֖וֹ וְאֵ֥ת\n","הַמֵּעַיִם אֶת שֶׁמְּכַסֶּה הַחֵלֶב וְאֶת הַזָּנָב שׁוּמַן אֶת וְיַגִּישׁ הַחֵלֶב כָּל אֶת מִמֶּנּוּ וְיַסִּיר\n","--------\n","מוֹעֵֽד אֹ֥הֶל פֶּ֖תַח יְהֹוָ֔ה לִפְנֵ֣י וְאֹתָ֑ם הַמִּטַּהֵ֖ר הָאִ֥ישׁ אֵ֛ת הַֽמְטַהֵ֗ר הַכֹּהֵ֣ן וְהֶעֱמִ֞יד\n","הַהִתְכַּנְּסוּת אוֹהֶל פֶּתַח מוּל יהוה לִפְנֵי הַכְּבָשִׂים וְאֶת הַנִּטְהַר הָאִישׁ אֶת יַעֲמִיד הַמְּטַהֵר הַכֹּהֵן\n","--------\n","תַּחְתֵּיהֶֽם אֲשֶׁ֥ר הָאֲדָמָ֖ה וַתִּבָּקַ֥ע הָאֵ֑לֶּה כׇּל הַדְּבָרִ֖ים אֵ֥ת לְדַבֵּ֕ר כְּכַלֹּת֔וֹ וַיְהִי֙\n","נִבְקְעָה שֶׁמִּתַּחְתֵּיהֶם הָאֲדָמָה הָאֵלֶּה הַדְּבָרִים כָּל אֶת לְדַבֵּר גָּמַר כְּשֶׁהוּא\n","--------\n","וְאֶת הַסִּינִֽי וְאֶת הַֽעַרְקִ֖י וְאֶת הַֽחִוִּ֥י\n","הַסִּינִי וְאֶת הַעַרְקִי וְאֶת הַחִוִּי וְאֶת\n","--------\n","פַּסִּֽים כְּתֹ֥נֶת ל֖וֹ וְעָ֥שָׂה ל֑וֹ ה֖וּא כִּֽי בֶן זְקֻנִ֥ים מִכׇּל בָּנָ֔יו אֶת יוֹסֵף֙ אָהַ֤ב וְיִשְׂרָאֵ֗ל\n","בְּפַסִּים מְצֻיֶּרֶת כֻּתּוֹנֶת לוֹ עָשָׂה וְהוּא זִקְנוּתוֹ לְעֵת לוֹ שֶׁנּוֹלַד הַבֵּן הָיָה הוּא כִּי בָּנָיו מִכָּל יוֹתֵר יוֹסֵף אֶת אָהַב וְיִשְׂרָאֵל\n","--------\n","מְאֹֽד כָבְדָ֖ה כִּ֥י וְחַ֨טָּאתָ֔ם כִּי רָ֑בָּה וַעֲמֹרָ֖ה סְדֹ֥ם זַעֲקַ֛ת יְהֹוָ֔ה וַיֹּ֣אמֶר\n","מְאוֹד חֲמוּרוֹת שֶׁלָּהֶם וְהָעֲבֵרוֹת גְּדוֹלָה וַעֲמוֹרָה סְדוֹם עַל הַתְּלֻנּוֹת זַעֲקַת אָמַר יהוה\n","--------\n","תַעֲשֽׂוּ לֹ֥א עֲבֹדָ֖ה כׇּל מְלֶ֥אכֶת מִקְרָא קֹ֑דֶשׁ הָרִאשׁ֖וֹן בַּיּ֥וֹם\n","עֲבוֹדָה שֶׁל מְלָאכָה שׁוּם תַּעֲשׂוּ אַל קָדוֹשׁ מְאוֹרָע הָרִאשׁוֹן בַּיּוֹם\n","--------\n","אוֹתָֽם וְהִכִּיתֶ֖ם אֶת הַמִּדְיָנִ֑ים צָר֖וֹר\n","אוֹתָם וְהִרְגּוּ בַּמִּדְיָנִים הִלָּחֲמוּ\n","--------\n","מִנְּשֹֽׂא עֲוֺנִ֖י גָּד֥וֹל אֶל יְהֹוָ֑ה קַ֖יִן וַיֹּ֥אמֶר\n","אוֹתוֹ לִסְבּוֹל תּוּכַל שֶׁלֹּא עַד גָּדוֹל כָּךְ כָּל עֲוֹנִי וְכִי יהוה אֶל אָמַר קַיִן\n","--------\n","עַד דָּֽן וַיִּרְדֹּ֖ף מֵא֔וֹת וּשְׁלֹ֣שׁ עָשָׂר֙ שְׁמֹנָ֤ה בֵית֗וֹ יְלִידֵ֣י אֶת חֲנִיכָ֜יו וַיָּ֨רֶק אָחִ֑יו נִשְׁבָּ֖ה כִּ֥י אַבְרָ֔ם וַיִּשְׁמַ֣ע\n","דָּן שֶׁנִּקְרָא לַמָּקוֹם עַד וְרָדַף בְּבֵיתוֹ וְגָדְלוּ שֶׁנּוֹלְדוּ עֲבָדָיו בְּנֵי עָשָׂר וּשְׁמוֹנָה מֵאוֹת שְׁלֹשׁ אֶת גִּיֵּס הוּא בַּשֶּׁבִי נָפַל שֶׁקְּרוֹבוֹ שָׁמַע אַבְרָם\n","--------\n","לְהַשְׁמִידֵֽנוּ הָאֱמֹרִ֖י בְּיַ֥ד אֹתָ֛נוּ לָתֵ֥ת מִצְרָ֑יִם מֵאֶ֣רֶץ הוֹצִיאָ֖נוּ אֹתָ֔נוּ יְהֹוָה֙ בְּשִׂנְאַ֤ת וַתֹּ֣אמְר֔וּ בְאׇהֳלֵיכֶם֙ וַתֵּרָגְנ֤וּ\n","אוֹתָנוּ לְהַשְׁמִיד הָאֱמוֹרִי לִידֵי אוֹתָנוּ לִמְסוֹר כְּדֵי אוֹתָנוּ שׂוֹנֵא שֶׁהוּא מִפְּנֵי מִצְרַיִם מֵאֶרֶץ אוֹתָנוּ הוֹצִיא יהוה וַאֲמַרְתֶּם בְּאָהֳלֵיכֶם הִתְלוֹנַנְתֶּם\n","--------\n","עִם הַבָּשָֽׂר הַנֶּ֖פֶשׁ וְלֹא תֹאכַ֥ל הַנָּ֑פֶשׁ ה֣וּא הַדָּ֖ם כִּ֥י הַדָּ֔ם אֲכֹ֣ל לְבִלְתִּי֙ חֲזַ֗ק רַ֣ק\n","הַבָּשָׂר עִם הַנֶּפֶשׁ אֶת תֹּאכַל וְאַל הַנֶּפֶשׁ הוּא הַדָּם כִּי הַדָּם אֶת לֶאֱכוֹל שֶׁלֹּא תִּתְחַזֵּק רַק\n","--------\n","מִצְרָֽיִם בְּכׇל אֶ֥רֶץ כִנִּ֖ים הָיָ֥ה הָאָ֛רֶץ כׇּל עֲפַ֥ר וּבַבְּהֵמָ֑ה בָּאָדָ֖ם הַכִּנָּ֔ם וַתְּהִי֙ הָאָ֔רֶץ אֶת עֲפַ֣ר וַיַּךְ֙ בְמַטֵּ֙הוּ֙ אֶת יָד֤וֹ אַהֲרֹ֨ן וַיֵּט֩ וַיַּֽעֲשׂוּ כֵ֗ן\n","מִצְרַיִם אֶרֶץ בְּכָל לְכִנִּים הָפַךְ הָאָרֶץ עֲפַר כָּל וּבַבְּהֵמָה בָּאָדָם הַכִּנִּים מַכַּת וְהָיְתָה הָאָרֶץ עֲפַר אֶת וְהִכָּה מַקְלוֹ עִם יָדוֹ אֶת הֵנִיף אַהֲרֹן כָּךְ עָשׂוּ הֵם\n","--------\n","הַֽחִתִּֽי עֶפְר֥וֹן בִּשְׂדֵ֖ה אֲשֶׁ֥ר אֶ֨ל הַמְּעָרָ֔ה אֶל אֲבֹתָ֑י אֹתִ֖י קִבְר֥וּ אֶל עַמִּ֔י נֶאֱסָ֣ף אֲנִי֙ אֲלֵהֶם֙ וַיֹּ֤אמֶר אוֹתָ֗ם וַיְצַ֣ו\n","הַחִתִּי עֶפְרוֹן שֶׁבִּשְׂדֵה בַּמְּעָרָה אֲבוֹתַי עִם אוֹתִי קִבְרוּ הַנְּשָׁמוֹת מְקוֹם אֶל נֶאֱסָף אֲנִי לָהֶם וְאָמַר אוֹתָם וְצִוָּה\n","--------\n","רֹאשֽׁוֹ שְׂעַ֥ר פֶּ֖רַע גַּדֵּ֥ל יִהְיֶ֔ה קָדֹ֣שׁ לַיהֹוָה֙ אֲשֶׁר יַזִּ֤יר הַיָּמִ֜ם עַד מְלֹ֨את עַל רֹאשׁ֑וֹ לֹא יַעֲבֹ֣ר תַּ֖עַר נִזְר֔וֹ נֶ֣דֶר כׇּל יְמֵי֙\n","לַיהוה שֶׁהִתְנַזֵּר הַיָּמִים שֶׁיֻּשְׁלְמוּ עַד רֹאשׁוֹ שְׂעַר אֶת וִיגַדֵּל קָדוֹשׁ יִהְיֶה הוּא גִלּוּחַ סַכִּין רֹאשׁוֹ עַל יַעֲבִיר לֹא נְזִירוּתוֹ נֶדֶר יְמֵי בְּכָל\n","--------\n","יְהֹוָֽה אֶת פְּנֵ֥י שָׁ֖ם אֲשֶׁר עָ֥מַד אֶ֨ל הַמָּק֔וֹם בַּבֹּ֑קֶר אַבְרָהָ֖ם וַיַּשְׁכֵּ֥ם\n","יהוה לִפְנֵי לְהִתְפַּלֵּל שָׁם שֶׁעָמַד לַמָּקוֹם וְהָלַךְ בַּבּוֹקֶר הִשְׁכִּים אַבְרָהָם\n","--------\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_8efe078e-9193-4260-8598-1a285041689f\", \"train_test_val.pkl\", 4459783)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"jqQt7ysDiBsv","executionInfo":{"status":"ok","timestamp":1620999537918,"user_tz":240,"elapsed":567,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"e688ebff-e14a-46d4-ec7d-0ecb7addb721"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>src</th>\n","      <th>target</th>\n","      <th>data_type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>וַיִּֽהְיוּ שָֽׁם שְׂדֵֽי מוֹאָ֖ב וַיָּבֹ֥אוּ ...</td>\n","      <td>שָׁם וְנִשְׁאֲרוּ מוֹאָב לְאֶרֶץ בָּאוּ הֵם שֶ...</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>הַתֶּֽבֶן בִּהְי֥וֹת כַּאֲשֶׁ֖ר בְּיוֹמ֔וֹ דְּ...</td>\n","      <td>הַקַּשׁ אֶת שֶׁקִּבַּלְתֶּם בַּזְּמַן יוֹם בְּ...</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>וָמַֽשׁ וְגֶ֥תֶר וְח֖וּל ע֥וּץ אֲרָ֑ם וּבְנֵ֖י</td>\n","      <td>וּמַשׁ וְגֶתֶר וְחוּל עוּץ אֲרָם וּבְנֵי</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>סָבִֽיב הַמִּזְבֵּ֖חַ עַל קַרְנ֥וֹת וְנָתַ֛ן ה...</td>\n","      <td>מִסָּבִיב הַמִּזְבֵּחַ פִּנּוֹת עַל וְיָשִׂים ...</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>תְעוֹנֵֽנוּ וְלֹ֥א תְנַחֲשׁ֖וּ לֹ֥א עַל הַדָּ֑...</td>\n","      <td>עֵינַיִם תֹּאחֲזוּ וְאַל תְּכַשְּׁפוּ אַל הַדָ...</td>\n","      <td>test</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9217</th>\n","      <td>יָשָֽׁן תֹּאכְל֖וּ תְּב֣וּאָתָ֔הּ עַד בּוֹא֙ ה...</td>\n","      <td>הַיְּשָׁנָה מֵהַתְּבוּאָה תֹּאכְלוּ שָׁנָה אוֹ...</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>9218</th>\n","      <td>בְּמוֹעֲדָֽם אֹתָ֖ם אֲשֶׁר תִּקְרְא֥וּ קֹ֑דֶשׁ...</td>\n","      <td>בִּזְמַנָּם אוֹתָם שֶׁתִּקְבְּעוּ קוֹדֶשׁ מְאו...</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>9219</th>\n","      <td>הָאֶחָֽד לָאַ֖יִל עֶשְׂרֹנִ֔ים שְׁנֵי֙ לַפָּ֔ר...</td>\n","      <td>אַיִל לְכָל לִיטֶר כְּ6 5 הָאֵיפָה עֲשִׂירִיּו...</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>9220</th>\n","      <td>הַיִּשְׂרְאֵלִֽי וְאִ֖ישׁ הַיִּשְׂרְאֵלִ֔ית בֶ...</td>\n","      <td>בַּמַּחֲנֶה רָבוּ יִשְׂרְאֵלִי וְאִישׁ הַיִּשְ...</td>\n","      <td>train</td>\n","    </tr>\n","    <tr>\n","      <th>9221</th>\n","      <td>עָלָֽיו רַבָּ֥ה הָאָדָ֖ם כִּֽי רָעַ֥ת וּמִשְׁפ...</td>\n","      <td>רַבָּה רָעָה לוֹ גּוֹרֶמֶת הָאָדָם רָעַת כִּי ...</td>\n","      <td>train</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>9222 rows × 3 columns</p>\n","</div>"],"text/plain":["                                                    src  ... data_type\n","0     וַיִּֽהְיוּ שָֽׁם שְׂדֵֽי מוֹאָ֖ב וַיָּבֹ֥אוּ ...  ...      test\n","1     הַתֶּֽבֶן בִּהְי֥וֹת כַּאֲשֶׁ֖ר בְּיוֹמ֔וֹ דְּ...  ...      test\n","2        וָמַֽשׁ וְגֶ֥תֶר וְח֖וּל ע֥וּץ אֲרָ֑ם וּבְנֵ֖י  ...      test\n","3     סָבִֽיב הַמִּזְבֵּ֖חַ עַל קַרְנ֥וֹת וְנָתַ֛ן ה...  ...      test\n","4     תְעוֹנֵֽנוּ וְלֹ֥א תְנַחֲשׁ֖וּ לֹ֥א עַל הַדָּ֑...  ...      test\n","...                                                 ...  ...       ...\n","9217  יָשָֽׁן תֹּאכְל֖וּ תְּב֣וּאָתָ֔הּ עַד בּוֹא֙ ה...  ...     train\n","9218  בְּמוֹעֲדָֽם אֹתָ֖ם אֲשֶׁר תִּקְרְא֥וּ קֹ֑דֶשׁ...  ...     train\n","9219  הָאֶחָֽד לָאַ֖יִל עֶשְׂרֹנִ֔ים שְׁנֵי֙ לַפָּ֔ר...  ...     train\n","9220  הַיִּשְׂרְאֵלִֽי וְאִ֖ישׁ הַיִּשְׂרְאֵלִ֔ית בֶ...  ...     train\n","9221  עָלָֽיו רַבָּ֥ה הָאָדָ֖ם כִּֽי רָעַ֥ת וּמִשְׁפ...  ...     train\n","\n","[9222 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"07VrA9s_wGeZ"},"source":["# Baseline.\n","Simple Encoder-Decoder from HW3 that seeks attention"]},{"cell_type":"code","metadata":{"id":"j8vHvOqtvYfk"},"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence\n","\n","\n","class Encoder(nn.Module):\n","  def __init__(self, input_size, hidden_size, dropout=0.):\n","    \"\"\"\n","    Inputs: \n","      - `input_size`: an int representing the RNN input size.\n","      - `hidden_size`: an int representing the RNN hidden size.\n","      - `dropout`: a float representing the dropout rate during training. Note\n","          that for 1-layer RNN this has no effect since dropout only applies to\n","          outputs of intermediate layers.\n","    \"\"\"\n","    layers = 1  # change to make deep\n","    super(Encoder, self).__init__()\n","\n","    # --------- Your code here --------- #\n","    # feel free to use a pre-implemented pytorch GRU\n","    # https://pytorch.org/docs/stable/generated/torch.nn.GRU.html\n","    self.rnn = torch.nn.GRU(input_size, hidden_size, num_layers=layers, \n","      dropout=dropout, batch_first=True, bidirectional=True) \n","    \n","    # --------- Your code ends --------- #\n","\n","  def forward(self, inputs, lengths):\n","    \"\"\"\n","    Inputs:\n","      - `inputs`: a 3d-tensor of shape (batch_size, max_seq_length, embed_size)\n","          representing a batch of padded embedded word vectors of source\n","          sentences.\n","      - `lengths`: a 1d-tensor of shape (batch_size,) representing the sequence\n","          lengths of `inputs`.\n","\n","    Returns:\n","      - `outputs`: a 3d-tensor of shape\n","        (batch_size, max_seq_length, hidden_size).\n","      - `finals`: a 3d-tensor of shape (num_layers, batch_size, hidden_size).\n","\n","      Hint: `outputs` and `finals` are both standard GRU outputs.\n","    \"\"\"\n","    outputs = None\n","    finals = None\n","    \n","    # --------- Your code here --------- #\n","    # hint: you probably want to pack the inputs and outputs (see note below)\n","    #       https://pytorch.org/docs/stable/generated/torch.nn.utils.rnn.pack_padded_sequence.html\n","    # hint2: given the shape of the inputs and outputs, \n","    #        it might be helpful to specify batch_first=True (also in __init___)\n","    # hint3: MAX_SENT_LENGTH_PLUS_SOS_EOS is a global variable that exists if \n","    #        you ever need to specify a total_length for outputs\n","\n","    pack_padded_inputs = torch.nn.utils.rnn.pack_padded_sequence(inputs, \n","      batch_first=True, lengths=lengths.cpu(), enforce_sorted=False)\n","    outputs, finals = self.rnn(pack_padded_inputs)\n","    finals = torch.cat([finals[k, :, :] for k in range(finals.size(0))], dim=1)\n","    finals = finals.unsqueeze(0)\n","    outputs, list_lengths = pad_packed_sequence(outputs, batch_first=True,\n","      total_length=MAX_SENT_LENGTH_PLUS_SOS_EOS)\n","\n","    # --------- Your code ends --------- #\n","\n","    return outputs, finals\n","\n","# simple RNN decoder that seeks attention\n","\n","class Decoder(nn.Module):\n","  \"\"\"An RNN decoder without attention.\"\"\"\n","\n","  def __init__(self, input_size, hidden_size, dropout=0.):\n","    \"\"\"\n","      Inputs:\n","        - `input_size`, `hidden_size`, and `dropout` the same as in Encoder.\n","    \"\"\"\n","    super(Decoder, self).__init__()\n","    layers = 1  # change to make deep \n","\n","    # --------- Your code here --------- #\n","    # hint: you need more layers than the encoder\n","    #       again, feel free to use pytorch implemetnations\n","    #       https://pytorch.org/docs/stable/generated/torch.nn.GRU.html\n","    \n","    # To initialize from the final encoder state.\n","    self.bridge = torch.nn.Linear(hidden_size * 2, hidden_size)  # to match sizes\n","    self.fc = torch.nn.Linear(hidden_size + input_size, hidden_size, bias=True)\n","    self.rnn = torch.nn.GRU(input_size, hidden_size, num_layers=layers, \n","      dropout=dropout, batch_first=True, bidirectional=False)\n","    \n","    # --------- Your code ends --------- #\n","\n","  def forward_step(self, prev_embed, hidden):\n","    \"\"\"Helper function for forward below:\n","       Perform a single decoder step (1 word).\n","\n","       Inputs:\n","      - `prev_embed`: a 3d-tensor of shape (batch_size, 1, embed_size)\n","          representing the padded embedded word vectors at this step in training\n","      - `hidden`: a 3d-tensor of shape (1, batch_size, hidden_size) representing\n","          the current hidden state.\n","\n","      Returns:\n","      - `hidden`: a 3d-tensor of shape (1, batch_size, hidden_size)\n","          representing the current decoder hidden state.\n","      - `pre_output`: a 3d-tensor of shape (batch_size, 1, hidden_size)\n","          representing the total decoder output for one step\n","    \"\"\"\n","    pre_output = None\n","    # --------- Your code here --------- #\n","    pre_output, hidden = self.rnn(prev_embed, hidden)\n","    pre_output = self.fc(torch.cat([pre_output, prev_embed], dim=2))\n","    # --------- Your code ends --------- #\n","\n","    return hidden, pre_output\n","\n","  def forward(self, inputs, encoder_finals, hidden=None, max_len=None):\n","    \"\"\"Unroll the decoder one step at a time.\n","\n","    Inputs:\n","      - `inputs`: a 3d-tensor of shape (batch_size, max_seq_length, embed_size)\n","          representing a batch of padded embedded word vectors of target\n","          sentences (for teacher-forcing during training).\n","      - `encoder_finals`: a 3d-tensor of shape\n","          (num_enc_layers, batch_size, hidden_size) representing the final\n","          encoder hidden states used to initialize the initial decoder hidden\n","          states.\n","      - `hidden`: a 3d-tensor of shape (1, batch_size, hidden_size) representing\n","          the value to be used to initialize the initial decoder hidden states.\n","          If None, then use `encoder_finals`.\n","      - `max_len`: an int representing the maximum decoding length.\n","\n","    Returns:\n","      - `outputs`: a 3d-tensor of shape\n","          (batch_size, max_seq_length, hidden_size) representing the raw\n","          decoder outputs (before converting to a `trg_vocab_size`-dim vector).\n","          We will convert it later in a `Generator` below.\n","      - `hidden`: a 3d-tensor of shape (1, batch_size, hidden_size)\n","          representing the last decoder hidden state.\n","    \"\"\"\n","\n","    # The maximum number of steps to unroll the RNN.\n","    if max_len is None:\n","      max_len = inputs.size(1)\n","\n","    # Initialize decoder hidden state.\n","    if hidden is None:\n","      hidden = self.init_hidden(encoder_finals)\n","\n","    outputs = None\n","    \n","    # --------- Your code here --------- #\n","    outputs = torch.zeros((inputs.shape[0], inputs.shape[1], hidden.shape[2])).to(device)\n","\n","    # Unroll the decoder RNN for `max_len` steps.\n","    # hint: use the above helper function forward_step that \n","    #       performs a single decoder step (1 word).\n","\n","    for inx in range(max_len):\n","      word = inputs[:, inx].unsqueeze(1)\n","      # perform single decoder step\n","      hidden, pre_output = self.forward_step(word, hidden)\n","      outputs[:, inx, :] = pre_output.squeeze()\n","    \n","    # --------- Your code ends --------- #\n","\n","    return hidden, outputs\n","\n","  def init_hidden(self, encoder_finals):\n","    \"\"\"Use encoder final hidden state to initialize decoder's first hidden\n","    state.\"\"\"\n","    decoder_init_hiddens = torch.tanh(self.bridge(encoder_finals))\n","\n","    return decoder_init_hiddens\n","\n","# encoder decoder wrap up class\n","\n","class EncoderDecoder(nn.Module):\n","  \"\"\"A standard Encoder-Decoder architecture without attention.\n","  \"\"\"\n","  def __init__(self, encoder, decoder, src_embed, trg_embed, generator):\n","    \"\"\"\n","    Inputs:\n","      - `encoder`: an `Encoder` object.\n","      - `decoder`: a `Decoder` object.\n","      - `src_embed`: an nn.Embedding object representing the lookup table for\n","          input (source) sentences.\n","      - `trg_embed`: an nn.Embedding object representing the lookup table for\n","          output (target) sentences.\n","      - `generator`: a `Generator` object. Essentially a linear mapping. See\n","          the next code cell.\n","    \"\"\"\n","    super(EncoderDecoder, self).__init__()\n","\n","    self.encoder = encoder\n","    self.decoder = decoder\n","    self.src_embed = src_embed\n","    self.trg_embed = trg_embed\n","    self.generator = generator\n","\n","  def forward(self, src_ids, trg_ids, src_lengths):\n","    \"\"\"Take in and process masked source and target sequences.\n","\n","    Inputs:\n","      `src_ids`: a 2d-tensor of shape (batch_size, max_seq_length) representing\n","        a batch of source sentences of word ids.\n","      `trg_ids`: a 2d-tensor of shape (batch_size, max_seq_length) representing\n","        a batch of target sentences of word ids.\n","      `src_lengths`: a 1d-tensor of shape (batch_size,) representing the\n","        sequence length of `src_ids`.\n","\n","    Returns the decoder outputs, see the above cell.\n","    \"\"\"\n","    encoder_hiddens, encoder_finals = self.encode(src_ids, src_lengths)\n","    del encoder_hiddens   # unused\n","    return self.decode(encoder_finals, trg_ids[:, :-1])\n","\n","  def encode(self, src_ids, src_lengths):\n","    return self.encoder(self.src_embed(src_ids), src_lengths)\n","    \n","  def decode(self, encoder_finals, trg_ids, decoder_hidden=None):\n","    return self.decoder(self.trg_embed(trg_ids), encoder_finals, decoder_hidden)\n","\n","# projection of output layer\n","\n","class Generator(nn.Module):\n","  \"\"\"Define standard linear + softmax generation step.\"\"\"\n","  def __init__(self, hidden_size, vocab_size):\n","    super(Generator, self).__init__()\n","    self.proj = nn.Linear(hidden_size, vocab_size, bias=False)\n","\n","  def forward(self, x):\n","    return F.log_softmax(self.proj(x), dim=-1)\n","\n","\n","# Perplexity and model evaluation\n","\n","import math\n","\n","\n","class SimpleLossCompute:\n","  \"\"\"A simple loss compute and train function.\"\"\"\n","\n","  def __init__(self, generator, criterion, opt=None):\n","    self.generator = generator\n","    self.criterion = criterion\n","    self.opt = opt\n","\n","  def __call__(self, x, y, norm):\n","    x = self.generator(x)\n","    loss = self.criterion(x.contiguous().view(-1, x.size(-1)),\n","                          y.contiguous().view(-1))\n","    loss = loss / norm\n","\n","    if self.opt is not None:  # training mode\n","      loss.backward()          \n","      self.opt.step()\n","      self.opt.zero_grad()\n","\n","    return loss.data.item() * norm\n","\n","\n","def run_epoch(data_loader, model, loss_compute, print_every):\n","  \"\"\"Standard Training and Logging Function\"\"\"\n","\n","  total_tokens = 0\n","  total_loss = 0\n","\n","  for i, (src_ids_BxT, src_lengths_B, trg_ids_BxL, trg_lengths_B) in enumerate(data_loader):\n","    # We define some notations here to help you understand the loaded tensor\n","    # shapes:\n","    #   `B`: batch size\n","    #   `T`: max sequence length of source sentences\n","    #   `L`: max sequence length of target sentences; due to our preprocessing\n","    #        in the beginning, `L` == `T` == 50\n","    # An example of `src_ids_BxT` (when B = 2):\n","    #   [[2, 4, 6, 7, ..., 4, 3, 0, 0, 0],\n","    #    [2, 8, 6, 5, ..., 9, 5, 4, 3, 0]]\n","    # The corresponding `src_lengths_B` would be [47, 49].\n","    # Note that SOS_INDEX == 2, EOS_INDEX == 3, and PAD_INDEX = 0.\n","\n","    src_ids_BxT = src_ids_BxT.to(device)\n","    src_lengths_B = src_lengths_B.to(device)\n","    trg_ids_BxL = trg_ids_BxL.to(device)\n","\n","    del trg_lengths_B   # unused\n","\n","    _, output = model(src_ids_BxT, trg_ids_BxL, src_lengths_B)\n","\n","    loss = loss_compute(x=output, y=trg_ids_BxL[:, 1:],\n","                        norm=src_ids_BxT.size(0))\n","    total_loss += loss\n","    total_tokens += (trg_ids_BxL[:, 1:] != PAD_INDEX).data.sum().item()\n","\n","    if model.training and i % print_every == 0:\n","      print(\"Epoch Step: %d Loss: %f\" % (i, loss / src_ids_BxT.size(0)))\n","\n","  return math.exp(total_loss / float(total_tokens))\n","\n","\n","def train(model, num_epochs, learning_rate, print_every):\n","  # Set `ignore_index` as PAD_INDEX so that pad tokens won't be included when\n","  # computing the loss.\n","  criterion = nn.NLLLoss(reduction=\"sum\", ignore_index=PAD_INDEX)\n","  optim = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","\n","  # Keep track of dev ppl for each epoch.\n","  dev_ppls = []\n","\n","  for epoch in range(num_epochs):\n","    print(\"Epoch\", epoch)\n","\n","    model.train()\n","    train_ppl = run_epoch(data_loader=train_data_loader, model=model,\n","                          loss_compute=SimpleLossCompute(model.generator,\n","                                                         criterion, optim),\n","                          print_every=print_every)\n","        \n","    model.eval()\n","    with torch.no_grad():      \n","      dev_ppl = run_epoch(data_loader=val_data_loader, model=model,\n","                          loss_compute=SimpleLossCompute(model.generator,\n","                                                         criterion, None),\n","                          print_every=print_every)\n","      print(\"Validation perplexity: %f\" % dev_ppl)\n","      dev_ppls.append(dev_ppl)\n","        \n","  return dev_ppls"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EX5g3aV5wRF7","outputId":"ba9e504d-a8cb-46cc-a6a3-32abc8de31f1"},"source":["# Hyperparameters for contructing the encoder-decoder model.\n","embed_size = 256   # Each word will be represented as a `embed_size`-dim vector.\n","hidden_size = 256  # RNN hidden size.\n","dropout = 0.2\n","\n","def plot_perplexity(perplexities):\n","  \"\"\"plot perplexities\"\"\"\n","  plt.title(\"Perplexity per Epoch\")\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Perplexity\")\n","  plt.plot(perplexities)\n","\n","pure_seq2seq = EncoderDecoder(\n","    encoder=Encoder(embed_size, hidden_size, dropout=dropout),\n","    decoder=Decoder(embed_size, hidden_size, dropout=dropout),\n","    src_embed=nn.Embedding(len(src_vocab_set), embed_size),\n","    trg_embed=nn.Embedding(len(trg_vocab_set), embed_size),\n","    generator=Generator(hidden_size, len(trg_vocab_set))).to(device)\n","\n","train_model = True\n","if train_model:\n","  # Start training. The returned `dev_ppls` is a list of dev perplexity for each\n","  # epoch.\n","  # change epochs to prevent overfitting\n","  pure_dev_ppls = train(pure_seq2seq, num_epochs=5, learning_rate=1e-3,\n","                        print_every=100)\n","  \n","  torch.save(pure_seq2seq.state_dict(), MODEL_FOLDER+\"/\" + \"pure_seq2seq.pt\")\n","\n","  # Plot perplexity\n","  plot_perplexity(pure_dev_ppls)\n","else:\n","  pure_seq2seq.load_state_dict(torch.load(MODEL_FOLDER+\"/\" + \"pure_seq2seq.pt\"))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/modules/rnn.py:63: UserWarning: dropout option adds dropout after all but last recurrent layer, so non-zero dropout expects num_layers greater than 1, but got dropout=0.2 and num_layers=1\n","  \"num_layers={}\".format(dropout, num_layers))\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 0\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:477: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"bFnpSu71x4pF"},"source":["Greedy Decoding"]},{"cell_type":"code","metadata":{"id":"zmhRSAvXx7z8"},"source":["def lookup_words(x, vocab):\n","  return [vocab[i] for i in x]\n","\n","def print_examples(model, src_vocab_set, trg_vocab_set, data_loader, decoder, \n","                   with_attention=False, n=3, EOS_INDEX=3, max_len=MAX_SENT_LENGTH_PLUS_SOS_EOS):\n","  \"\"\"Prints `n` examples. Assumes batch size of 1.\"\"\"\n","\n","  model.eval()\n","\n","  for i, (src_ids, src_lengths, trg_ids, _) in enumerate(data_loader):\n","    if not with_attention:\n","      result = decoder(model, src_ids.to(device), src_lengths.to(device),\n","                             max_len=max_len)\n","    else:\n","      result, _ = decoder(model, src_ids.to(device),\n","                                          src_lengths.to(device),\n","                                          max_len=max_len)\n","\n","    # remove <s>\n","    src_ids = src_ids[0, 1:]\n","    trg_ids = trg_ids[0, 1:]\n","    # remove </s> and <pad>\n","    src_ids = src_ids[:np.where(src_ids == EOS_INDEX)[0][0]]\n","    trg_ids = trg_ids[:np.where(trg_ids == EOS_INDEX)[0][0]]\n","  \n","    print(\"Example #%d\" % (i + 1))\n","    print(\"Src : \", \" \".join(lookup_words(src_ids, vocab=list(src_vocab_set))))\n","    print(\"Trg : \", \" \".join(lookup_words(trg_ids, vocab=list(trg_vocab_set))))\n","    print(\"Pred: \", \" \".join(lookup_words(result, vocab=list(trg_vocab_set))))\n","    print()\n","\n","    if i == n - 1:\n","      break\n","\n","\n","def greedy_decode(model, src_ids, src_lengths, max_len):\n","  \"\"\"Greedily decode a sentence for EncoderDecoder. Make sure to chop off the \n","     EOS token!\"\"\"\n","\n","  with torch.no_grad():\n","    _, encoder_finals = model.encode(src_ids, src_lengths)\n","    prev_y = torch.ones(1, 1).fill_(SOS_INDEX).type_as(src_ids)\n","\n","  output = []\n","  hidden = None\n","  \n","  # --------- Your code here --------- #\n","\n","  decoder_hidden = None\n","  output = np.zeros(max_len, np.int64)\n","\n","  for j in range(max_len):\n","    decoder_hidden, decoder_outputs = model.decode(encoder_finals, prev_y, \n","      decoder_hidden)\n","    probabilities = model.generator(decoder_outputs)\n","    word_prediction = torch.argmax(probabilities, axis=2)\n","    prev_y = word_prediction\n","    if word_prediction == EOS_INDEX: # chopping off the EOS token\n","      break\n","    output[j] = word_prediction\n","\n","\n","  # --------- Your code ends --------- #\n","\n","  return output\n","\n","example_set = MTDataset(val_src_sentences_list, src_vocab_set,\n","                        val_trg_sentences_list, trg_vocab_set)\n","example_data_loader = data.DataLoader(example_set, batch_size=1, num_workers=1,\n","                                      shuffle=False)\n","\n","\n","print(\"EncoderDecoder Results:\")\n","print_examples(pure_seq2seq, src_vocab_set, trg_vocab_set,\n","                         example_data_loader, greedy_decode, n=40)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"la6yb_G25IaH"},"source":["# Transformer-Based Model \n","(Dana's stuff.)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"5RTKSjsn7-kd"},"source":["turning data to csv in proper format"]},{"cell_type":"code","metadata":{"id":"StqqT2zPt916"},"source":["import numpy as np\n","import csv\n","import pandas as pd\n","import unicodedata\n","import string\n","import re\n","import random\n","import torch\n","from sklearn.model_selection import train_test_split\n","from torch.utils.data import TensorDataset, DataLoader\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KRLpD615MzU3","executionInfo":{"status":"ok","timestamp":1620858176843,"user_tz":240,"elapsed":1148,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"4450afb4-7a7b-44bd-9261-091caa631511"},"source":["####no need!\n","\"\"\"\n","def lookup_words(x, vocab):\n","  return [vocab[i] for i in x]\n","\n","def remove_niqqud_from_string(my_string):\n","    return ''.join(['' if  1456 <= ord(c) <= 1479 else c for c in my_string])\n","\n","def csv_data(src_vocab_set, trg_vocab_set, data_loader, \n","                   n=3, EOS_INDEX=3):\n","  #Prints `n` examples. Assumes batch size of 1.\n","  file = open(\"columns.txt\", \"w\")\n","  writer = csv.writer(file)\n","  writer.writerow(['num', 'source', 'target'])\n","  for i, (src_ids, src_lengths, trg_ids, _) in enumerate(data_loader):\n","    # remove <s>\n","    src_ids = src_ids[0, 1:]\n","    trg_ids = trg_ids[0, 1:]\n","    # remove </s> and <pad>\n","    src_ids = src_ids[:np.where(src_ids == EOS_INDEX)[0][0]]\n","    trg_ids = trg_ids[:np.where(trg_ids == EOS_INDEX)[0][0]]\n","\n","\n","    src =  \" \".join(lookup_words(src_ids, vocab=list(src_vocab_set)))\n","    trg =  \" \".join(lookup_words(trg_ids, vocab=list(trg_vocab_set)))\n","    new_src = remove_niqqud_from_string(src)\n","    new_trg = remove_niqqud_from_string(trg)\n","    writer.writerow([i, src, trg])\n","    #print(\"Example #%d\" % (i + 1))\n","    #print(type(lookup_words(src_ids, vocab=list(src_vocab_set))))\n","    #print(\"Trg : \", \" \".join(lookup_words(trg_ids, vocab=list(trg_vocab_set))))\n","    #print()\n","\n","    if i == n - 1:\n","      break\n","\n","\n","example_set = MTDataset(val_src_sentences_list, src_vocab_set,\n","                        val_trg_sentences_list, trg_vocab_set)\n","example_data_loader = data.DataLoader(example_set, batch_size=1, num_workers=1,\n","                                      shuffle=False)\n","csv_data(src_vocab_set, trg_vocab_set,\n","                         example_data_loader, n=len(trg_vocab_set))\n","\"\"\""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\ndef lookup_words(x, vocab):\\n  return [vocab[i] for i in x]\\n\\ndef remove_niqqud_from_string(my_string):\\n    return \\'\\'.join([\\'\\' if  1456 <= ord(c) <= 1479 else c for c in my_string])\\n\\ndef csv_data(src_vocab_set, trg_vocab_set, data_loader, \\n                   n=3, EOS_INDEX=3):\\n  #Prints `n` examples. Assumes batch size of 1.\\n  file = open(\"columns.txt\", \"w\")\\n  writer = csv.writer(file)\\n  writer.writerow([\\'num\\', \\'source\\', \\'target\\'])\\n  for i, (src_ids, src_lengths, trg_ids, _) in enumerate(data_loader):\\n    # remove <s>\\n    src_ids = src_ids[0, 1:]\\n    trg_ids = trg_ids[0, 1:]\\n    # remove </s> and <pad>\\n    src_ids = src_ids[:np.where(src_ids == EOS_INDEX)[0][0]]\\n    trg_ids = trg_ids[:np.where(trg_ids == EOS_INDEX)[0][0]]\\n\\n\\n    src =  \" \".join(lookup_words(src_ids, vocab=list(src_vocab_set)))\\n    trg =  \" \".join(lookup_words(trg_ids, vocab=list(trg_vocab_set)))\\n    new_src = remove_niqqud_from_string(src)\\n    new_trg = remove_niqqud_from_string(trg)\\n    writer.writerow([i, src, trg])\\n    #print(\"Example #%d\" % (i + 1))\\n    #print(type(lookup_words(src_ids, vocab=list(src_vocab_set))))\\n    #print(\"Trg : \", \" \".join(lookup_words(trg_ids, vocab=list(trg_vocab_set))))\\n    #print()\\n\\n    if i == n - 1:\\n      break\\n\\n\\nexample_set = MTDataset(val_src_sentences_list, src_vocab_set,\\n                        val_trg_sentences_list, trg_vocab_set)\\nexample_data_loader = data.DataLoader(example_set, batch_size=1, num_workers=1,\\n                                      shuffle=False)\\ncsv_data(src_vocab_set, trg_vocab_set,\\n                         example_data_loader, n=len(trg_vocab_set))\\n'"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"J0HXQsOKg0XV"},"source":["## Write data to csv."]},{"cell_type":"code","metadata":{"id":"hhu0Jh6Q76U6"},"source":["#data = pd.read_csv(\"/content/columns.txt\")\n","#data = pd.read_csv(\"/content/data.csv\")\n","\n","file = open(\"columns.txt\", \"w\")\n","writer = csv.writer(file)\n","writer.writerow(['num', 'source', 'target'])\n","for i in range(len(df['src'])):\n","  #if df['data_type'][i]=='train':\n","  writer.writerow([i, df['src'][i], df['target'][i]])\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GxDJhxBSg4e_"},"source":["## Read data from csv."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tl-FmU1_su1F","executionInfo":{"status":"ok","timestamp":1620858177012,"user_tz":240,"elapsed":1303,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"7cf5a9b5-0a9c-4040-8d8b-6040f5d151c5"},"source":["data = pd.read_csv(\"/content/columns.txt\")\n","\n","data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>num</th>\n","      <th>source</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>ויהיו שם שדי מואב ויבאו יהודה לחם מבית אפרתים ...</td>\n","      <td>שם ונשארו מואב לארץ באו הם שביהודה לחם בית היא...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>התבן בהיות כאשר ביומו דבר יום מעשיכם כלו לאמר ...</td>\n","      <td>הקש את שקבלתם בזמן יום בכל שעשיתם כמו מעשיכם א...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>ומש וגתר וחול עוץ ארם ובני</td>\n","      <td>ומש וגתר וחול עוץ ארם ובני</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>סביב המזבח על קרנות ונתן השעיר ומדם הפר מדם ול...</td>\n","      <td>מסביב המזבח פנות על וישים התיש ומדם הפר מדם וי...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>תעוננו ולא תנחשו על הדם תאכלו</td>\n","      <td>עינים תאחזו ואל תכשפו אל הדם עם בעודו בשר תאכל...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   num  ...                                             target\n","0    0  ...  שם ונשארו מואב לארץ באו הם שביהודה לחם בית היא...\n","1    1  ...  הקש את שקבלתם בזמן יום בכל שעשיתם כמו מעשיכם א...\n","2    2  ...                         ומש וגתר וחול עוץ ארם ובני\n","3    3  ...  מסביב המזבח פנות על וישים התיש ומדם הפר מדם וי...\n","4    4  ...  עינים תאחזו ואל תכשפו אל הדם עם בעודו בשר תאכל...\n","\n","[5 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"GOTT0SX9-R9Q"},"source":["## Tokenizing"]},{"cell_type":"code","metadata":{"id":"RvXegERs-LnK"},"source":["## Create a Language class to store  util functions\n","## such as index to word and word to index\n","SOS_token = 0\n","EOS_token = 1\n","\n","\n","class Lang:\n","    def __init__(self, name):\n","        self.name = name\n","        self.word2index = {\"<blank>\":0, \"SOS\":1,\"EOS\":2}\n","        self.word2count = {}\n","        self.index2word = {0:\"<blank>\", 1: \"SOS\", 2: \"EOS\"}\n","        self.n_words = 3  # Count SOS and EOS\n","\n","    def addSentence(self, sentence):\n","        for word in sentence.split(' '):\n","            self.addWord(word)\n","\n","    def addWord(self, word):\n","        if word not in self.word2index:\n","            self.word2index[word] = self.n_words\n","            self.word2count[word] = 1\n","            self.index2word[self.n_words] = word\n","            self.n_words += 1\n","        else:\n","            self.word2count[word] += 1\n","\n","\n","# Turn a Unicode string to plain ASCII, thanks to\n","# https://stackoverflow.com/a/518232/2809427\n","def unicodeToAscii(s):\n","    return ''.join(\n","        c for c in unicodedata.normalize('NFD', s)\n","        if unicodedata.category(c) != 'Mn'\n","    )\n","\n","#if we go to english or something? no need for hebrew\n","# Lowercase, trim, and remove non-letter characters\n","def normalizeString(s):\n","    s = unicodeToAscii(s.lower().strip())\n","    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n","    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n","    return s"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PqhsPSKI-bu3","executionInfo":{"status":"ok","timestamp":1620858177013,"user_tz":240,"elapsed":1290,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"2d72ec9e-14db-4bd1-99b8-c86290f864c0"},"source":["zdata = list(zip(data[\"source\"].values,data[\"target\"]))\n","#zdata = list(zip(data[\"en\"].values,data[\"yo\"]))\n","#chcking its ok, notice text is back ward, reading word from left to right\n","print(len(zdata), zdata[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["9198 ('ויהיו שם שדי מואב ויבאו יהודה לחם מבית אפרתים וכליון מחלון שני בניו ושם נעמי אשתו ושם אלימלך האיש ושם', 'שם ונשארו מואב לארץ באו הם שביהודה לחם בית היא אפרת מהעיר היו הם וכליון מחלון בניו שני ושם נעמי אשתו ושם אלימלך היה האיש שם')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KZfkkH05_Ku3"},"source":["## Util function to make it easier to s\n","## group the language into output and input\n","def readLang(lang1,lang2,reverse=False):\n","    \n","    pairs = zdata\n","    \n","    if reverse:\n","        pairs =  [list(reversed(p)) for p in pairs]\n","        input_lang = Lang(lang1)\n","        output_lang = Lang(lang2)\n","        \n","    else:\n","        input_lang = Lang(lang1)\n","        output_lang = Lang(lang2)\n","        \n","    return input_lang, output_lang,pairs\n","\n","MAX_LENGTH = 100\n","\n","def filterPair(p):\n","    return len(p[0].split(' ')) < MAX_LENGTH and \\\n","        len(p[1].split(' ')) < MAX_LENGTH\n","\n","\n","def filterPairs(pairs):\n","    return [pair for pair in pairs if filterPair(pair)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZZCcSJNFhGES"},"source":["## Data Preparation."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4TirUOj3_dHe","executionInfo":{"status":"ok","timestamp":1620858177272,"user_tz":240,"elapsed":1534,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"fc0a119f-cd2c-4c51-9369-db17710a26fb"},"source":["def prepareData(lang1, lang2, reverse=False):\n","    input_lang, output_lang, pairs = readLang(lang1, lang2, reverse)\n","    \n","    print(\"Read %s sentence pairs\" % len(pairs))\n","    pairs = filterPairs(pairs)\n","    print(\"Trimmed to %s sentence pairs\" % len(pairs))\n","    print(\"Counting words...\")\n","    for pair in pairs:\n","        input_lang.addSentence(pair[0])\n","        output_lang.addSentence(pair[1])\n","    print(\"Counted words:\")\n","    print(input_lang.name, input_lang.n_words)\n","    print(output_lang.name, output_lang.n_words)\n","    return input_lang, output_lang, pairs\n","\n","\n","input_lang, output_lang, pairs = prepareData('target', 'source')\n","#input_lang, output_lang, pairs = prepareData('en', 'yo')\n","\n","print(random.choice(pairs))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Read 9198 sentence pairs\n","Trimmed to 9198 sentence pairs\n","Counting words...\n","Counted words:\n","target 14982\n","source 17241\n","('במקל את האתון ויך בלעם ויחר אף בלעם תחת ותרבץ יהוה את מלאך האתון ותרא', 'במקל האתון את והכה כעס בלעם בלעם תחת ורבצה יהוה מלאך את ראתה האתון')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ClVcKqnvpS_","executionInfo":{"status":"ok","timestamp":1620858178020,"user_tz":240,"elapsed":2274,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"2ffe02df-54e6-4a15-cd02-806e7fcc071b"},"source":["# Plot the composition of the language.\n","# Plot 1: Histogram of words in Source (Bible) text.\n","counts = []\n","for w, count in input_lang.word2count.items():\n","  counts += [input_lang.word2index[w]]*count\n","plt.hist(counts, bins=400)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Cqs0McqPFJxz"},"source":["def tokenize(lang,sentence):\n","    return [lang.word2index[word] for word in sentence.split(' ')]\n","\n","\n","## tokenization for output lang\n","def tokenize2(lang,sentence):\n","    \n","    sent = \"SOS\" + \" \" + sentence + \" \" + \"EOS\"\n","    return [lang.word2index[word] for word in sent.split(' ')]\n","pairs2 = np.array(pairs)\n","input_token = list(map(lambda x: tokenize(input_lang,x),pairs2[:,0]))\n","output_token = list(map(lambda x: tokenize2(output_lang,x),pairs2[:,1]))\n","\n","#padding!\n","in_padded = np.zeros((len(input_token),MAX_LENGTH))\n","out_padded = np.zeros((len(output_token),MAX_LENGTH))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A5-Jg7BiFbSf"},"source":["def tokenizing(token, padded):\n","  for i,v in enumerate(token):\n","      for j, t in enumerate(v):\n","          padded[i,j] = t\n","  return padded\n","\n","input_tokenPad = tokenizing(input_token, in_padded)\n","output_tokenPad = tokenizing(output_token, out_padded)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ztq3xzkaG2H4","executionInfo":{"status":"ok","timestamp":1620858178347,"user_tz":240,"elapsed":2578,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"c6ea996b-31cd-48d0-f352-5e916900c470"},"source":["print(input_tokenPad)\n","print(input_tokenPad.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[3.0000e+00 4.0000e+00 5.0000e+00 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [2.1000e+01 2.2000e+01 2.3000e+01 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [3.2000e+01 3.3000e+01 3.4000e+01 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," ...\n"," [1.1480e+03 5.2000e+01 5.6780e+03 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [5.6400e+02 4.7920e+03 6.2000e+02 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [2.9300e+02 8.7570e+03 1.0088e+04 ... 0.0000e+00 0.0000e+00 0.0000e+00]]\n","(9198, 100)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"44OzmFRYHNbo","executionInfo":{"status":"ok","timestamp":1620858178348,"user_tz":240,"elapsed":2570,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"4ed66eaf-8812-4ef2-f861-fb7ab1d7e74f"},"source":["\n","## we only want up to 20K rows------cause of batching\n","input_tokenPad1 = input_tokenPad[:20000]\n","output_tokenPad1 = output_tokenPad[:20000]\n","train_heb, valid_heb,train_bib,valid_bib = train_test_split(input_tokenPad1,output_tokenPad1,test_size=0.2,shuffle=True)\n","print(valid_bib.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1840, 100)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ZTg5VRCHX2T","executionInfo":{"status":"ok","timestamp":1620858178348,"user_tz":240,"elapsed":2563,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"64b4a038-f446-4d6b-8189-31b54332f8bd"},"source":["train_data = TensorDataset(torch.from_numpy(train_heb).long(),torch.from_numpy(train_bib).long())\n","valid_data = TensorDataset(torch.from_numpy(valid_heb).long(),torch.from_numpy(valid_bib).long())\n","\n","batch_size = 100\n","\n","train_loader= DataLoader(train_data,shuffle=True,batch_size=batch_size,)\n","valid_loader =DataLoader(valid_data,shuffle=True,batch_size=batch_size,)\n","dataiter = iter(train_loader)\n","sample_x, sample_y = dataiter.next()\n","\n","print(\"Device of Hebrew\", sample_x.device)\n","print(len(train_data))\n","print(len(valid_data))\n","print(len(train_loader))\n","print(len(valid_loader))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Device of Hebrew cpu\n","7358\n","1840\n","74\n","19\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2yauGAJrHgFt"},"source":["# Model: Transformer, based on NLP Harvard."]},{"cell_type":"code","metadata":{"id":"os5L6zDxHfdU"},"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","import math, copy, time\n","from torch.autograd import Variable\n","import matplotlib.pyplot as plt\n","import seaborn\n","seaborn.set_context(context=\"talk\")\n","%matplotlib inline\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PIG8zSGHHvXO"},"source":["class EncoderDecoder(nn.Module):\n","    \"\"\"\n","    A standard Encoder-Decoder architecture. Base for this and many \n","    other models.\n","    \"\"\"\n","    def __init__(self, encoder, decoder, src_embed, tgt_embed, generator):\n","        super(EncoderDecoder, self).__init__()\n","        self.encoder = encoder\n","        self.decoder = decoder\n","        self.src_embed = src_embed\n","        self.tgt_embed = tgt_embed\n","        self.generator = generator\n","        \n","    def forward(self, src, tgt, src_mask, tgt_mask):\n","        \"Take in and process masked src and target sequences.\"\n","        return self.decode(self.encode(src, src_mask), src_mask,\n","                            tgt, tgt_mask)\n","    \n","    def encode(self, src, src_mask):\n","        return self.encoder(self.src_embed(src), src_mask)\n","    \n","    def decode(self, memory, src_mask, tgt, tgt_mask):\n","        return self.decoder(self.tgt_embed(tgt), memory, src_mask, tgt_mask)\n","\n","\n","class Generator(nn.Module):\n","    \"Define standard linear + softmax generation step.\"\n","    def __init__(self, d_model, vocab):\n","        super(Generator, self).__init__()\n","        self.proj = nn.Linear(d_model, vocab)\n","\n","    def forward(self, x):\n","        return F.log_softmax(self.proj(x), dim=-1)\n","\n","def clones(module, N):\n","    \"Produce N identical layers.\"\n","    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])\n","\n","class Encoder(nn.Module):\n","    \"Core encoder is a stack of N layers\"\n","    def __init__(self, layer, N):\n","        super(Encoder, self).__init__()\n","        self.layers = clones(layer, N)\n","        self.norm = LayerNorm(layer.size)\n","        \n","    def forward(self, x, mask):\n","        \"Pass the input (and mask) through each layer in turn.\"\n","        for layer in self.layers:\n","            x = layer(x, mask)\n","        return self.norm(x)\n","\n","class LayerNorm(nn.Module):\n","    \"Construct a layernorm module (See citation for details).\"\n","    def __init__(self, features, eps=1e-6):\n","        super(LayerNorm, self).__init__()\n","        self.a_2 = nn.Parameter(torch.ones(features))\n","        self.b_2 = nn.Parameter(torch.zeros(features))\n","        self.eps = eps\n","\n","    def forward(self, x):\n","        mean = x.mean(-1, keepdim=True)\n","        std = x.std(-1, keepdim=True)\n","        return self.a_2 * (x - mean) / (std + self.eps) + self.b_2\n","\n","class SublayerConnection(nn.Module):\n","    \"\"\"\n","    A residual connection followed by a layer norm.\n","    Note for code simplicity the norm is first as opposed to last.\n","    \"\"\"\n","    def __init__(self, size, dropout):\n","        super(SublayerConnection, self).__init__()\n","        self.norm = LayerNorm(size)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x, sublayer):\n","        \"Apply residual connection to any sublayer with the same size.\"\n","        return x + self.dropout(sublayer(self.norm(x)))\n","\n","\n","class EncoderLayer(nn.Module):\n","    \"Encoder is made up of self-attn and feed forward (defined below)\"\n","    def __init__(self, size, self_attn, feed_forward, dropout):\n","        super(EncoderLayer, self).__init__()\n","        self.self_attn = self_attn\n","        self.feed_forward = feed_forward\n","        self.sublayer = clones(SublayerConnection(size, dropout), 2)\n","        self.size = size\n","\n","    def forward(self, x, mask):\n","        \"Follow Figure 1 (left) for connections.\"\n","        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))\n","        return self.sublayer[1](x, self.feed_forward)\n","\n","\n","class Decoder(nn.Module):\n","    \"Generic N layer decoder with masking.\"\n","    def __init__(self, layer, N):\n","        super(Decoder, self).__init__()\n","        self.layers = clones(layer, N)\n","        self.norm = LayerNorm(layer.size)\n","        \n","    def forward(self, x, memory, src_mask, tgt_mask):\n","        for layer in self.layers:\n","            x = layer(x, memory, src_mask, tgt_mask)\n","        return self.norm(x)\n","\n","class DecoderLayer(nn.Module):\n","    \"Decoder is made of self-attn, src-attn, and feed forward (defined below)\"\n","    def __init__(self, size, self_attn, src_attn, feed_forward, dropout):\n","        super(DecoderLayer, self).__init__()\n","        self.size = size\n","        self.self_attn = self_attn\n","        self.src_attn = src_attn\n","        self.feed_forward = feed_forward\n","        self.sublayer = clones(SublayerConnection(size, dropout), 3)\n"," \n","    def forward(self, x, memory, src_mask, tgt_mask):\n","        \"Follow Figure 1 (right) for connections.\"\n","        m = memory\n","        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tgt_mask))\n","        x = self.sublayer[1](x, lambda x: self.src_attn(x, m, m, src_mask))\n","        return self.sublayer[2](x, self.feed_forward)\n","\n","\n","def subsequent_mask(size):\n","    \"Mask out subsequent positions.\"\n","    attn_shape = (1, size, size)\n","    subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('uint8')\n","    return torch.from_numpy(subsequent_mask) == 0\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KQ44lKcmIV06","executionInfo":{"status":"ok","timestamp":1620858178826,"user_tz":240,"elapsed":2057,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"2224ae44-5573-49e0-a53b-c447bbc9cf42"},"source":["plt.figure(figsize=(5,5))\n","plt.imshow(subsequent_mask(20)[0])\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f34956bce10>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"O7AHDSRKIdMu"},"source":["def attention(query, key, value, mask=None, dropout=None):\n","    \"Compute 'Scaled Dot Product Attention'\"\n","    d_k = query.size(-1)\n","    scores = torch.matmul(query, key.transpose(-2, -1)) \\\n","             / math.sqrt(d_k)\n","    if mask is not None:\n","        scores = scores.masked_fill(mask == 0, -1e9)\n","    p_attn = F.softmax(scores, dim = -1)\n","    if dropout is not None:\n","        p_attn = dropout(p_attn)\n","    return torch.matmul(p_attn, value), p_attn\n","  \n","class MultiHeadedAttention(nn.Module):\n","    def __init__(self, h, d_model, dropout=0.1):\n","        \"Take in model size and number of heads.\"\n","        super(MultiHeadedAttention, self).__init__()\n","        assert d_model % h == 0\n","        # We assume d_v always equals d_k\n","        self.d_k = d_model // h\n","        self.h = h\n","        self.linears = clones(nn.Linear(d_model, d_model), 4)\n","        self.attn = None\n","        self.dropout = nn.Dropout(p=dropout)\n","        \n","    def forward(self, query, key, value, mask=None):\n","        \"Implements Figure 2\"\n","        if mask is not None:\n","            # Same mask applied to all h heads.\n","            mask = mask.unsqueeze(1)\n","        nbatches = query.size(0)\n","        \n","        # 1) Do all the linear projections in batch from d_model => h x d_k \n","        query, key, value = \\\n","            [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)\n","             for l, x in zip(self.linears, (query, key, value))]\n","        \n","        # 2) Apply attention on all the projected vectors in batch. \n","        x, self.attn = attention(query, key, value, mask=mask, \n","                                 dropout=self.dropout)\n","        \n","        # 3) \"Concat\" using a view and apply a final linear. \n","        x = x.transpose(1, 2).contiguous() \\\n","             .view(nbatches, -1, self.h * self.d_k)\n","        return self.linears[-1](x)\n","\n","class PositionwiseFeedForward(nn.Module):\n","    \"Implements FFN equation.\"\n","    def __init__(self, d_model, d_ff, dropout=0.1):\n","        super(PositionwiseFeedForward, self).__init__()\n","        self.w_1 = nn.Linear(d_model, d_ff)\n","        self.w_2 = nn.Linear(d_ff, d_model)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        return self.w_2(self.dropout(F.relu(self.w_1(x))))\n","\n","\n","class Embeddings(nn.Module):\n","    def __init__(self, d_model, vocab):\n","        super(Embeddings, self).__init__()\n","        self.lut = nn.Embedding(vocab, d_model)\n","        self.d_model = d_model\n","\n","    def forward(self, x):\n","        return self.lut(x) * math.sqrt(self.d_model)\n","\n","\n","class PositionalEncoding(nn.Module):\n","    \"Implement the PE function.\"\n","    def __init__(self, d_model, dropout, max_len=5000):\n","        super(PositionalEncoding, self).__init__()\n","        self.dropout = nn.Dropout(p=dropout)\n","        \n","        # Compute the positional encodings once in log space.\n","        pe = torch.zeros(max_len, d_model)\n","        position = torch.arange(0., max_len).unsqueeze(1)\n","        div_term = torch.exp(torch.arange(0., d_model, 2) *\n","                             -(math.log(10000.0) / d_model))\n","        pe[:, 0::2] = torch.sin(position * div_term)\n","        pe[:, 1::2] = torch.cos(position * div_term)\n","        pe = pe.unsqueeze(0)\n","        self.register_buffer('pe', pe)\n","        \n","    def forward(self, x):\n","        x = x + Variable(self.pe[:, :x.size(1)], \n","                         requires_grad=False)\n","        return self.dropout(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qc-BUt4YIz7J","executionInfo":{"status":"ok","timestamp":1620858179300,"user_tz":240,"elapsed":2509,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"5b771883-f05b-43ce-f2d2-f20bb560a2ca"},"source":["\n","plt.figure(figsize=(15, 5))\n","pe = PositionalEncoding(20, 0)\n","y = pe.forward(Variable(torch.zeros(1, 100, 20)))\n","plt.plot(np.arange(100), y[0, :, 4:8].data.numpy())\n","plt.legend([\"dim %d\"%p for p in [4,5,6,7]])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f3495673510>"]},"metadata":{"tags":[]},"execution_count":32},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"0S0xxVRzI2w6"},"source":["def make_model(src_vocab, tgt_vocab, N=6, \n","               d_model=512, d_ff=2048, h=8, dropout=0.1):\n","    \"Helper: Construct a model from hyperparameters.\"\n","    c = copy.deepcopy\n","    attn = MultiHeadedAttention(h, d_model)\n","    ff = PositionwiseFeedForward(d_model, d_ff, dropout)\n","    position = PositionalEncoding(d_model, dropout)\n","    model = EncoderDecoder(\n","        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),\n","        Decoder(DecoderLayer(d_model, c(attn), c(attn), \n","                             c(ff), dropout), N),\n","        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),\n","        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),\n","        Generator(d_model, tgt_vocab))\n","    \n","    # This was important from their code. \n","    # Initialize parameters with Glorot / fan_avg.\n","    for p in model.parameters():\n","        if p.dim() > 1:\n","            nn.init.xavier_uniform(p)\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vEMSuyeDI68c","executionInfo":{"status":"ok","timestamp":1620858179482,"user_tz":240,"elapsed":2674,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"ef0cbdcf-6462-49b6-ea07-1ac0e6e28ab0"},"source":["tmp_model = make_model(10, 10, 2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"hHlp9exjI-gd"},"source":["#Train Transformer."]},{"cell_type":"markdown","metadata":{"id":"Y6GJB9Qbv46p"},"source":["## BLEU Score utilities."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rpio5SlKv4E5","executionInfo":{"status":"ok","timestamp":1620858181914,"user_tz":240,"elapsed":3421,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"0086f152-a420-4491-94d4-1e037563d5c6"},"source":["! pip install sacrebleu\n","import sacrebleu\n","from tqdm import tqdm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: sacrebleu in /usr/local/lib/python3.7/dist-packages (1.5.1)\n","Requirement already satisfied: portalocker==2.0.0 in /usr/local/lib/python3.7/dist-packages (from sacrebleu) (2.0.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"coeGRc_rs5Qa"},"source":["\n","# A small metohd to compute BLEU scores for the Test data when evaluated by current model.\n","\n","# NOTE(yorai): Test and Validation are one and the same here. Test on Validation then.\n","def bleu_for_model(model, valid_loader_bleu, num_examples = None):\n","  bleu_scores = []\n","  for ix, data in enumerate(valid_loader_bleu):\n","      src,trg = data\n","      batch = Batch(src.cuda(),trg.cuda())\n","      src = batch.src[:1]\n","      src_mask = (src != input_lang.word2index[\"<blank>\"]).unsqueeze(-2)\n","      out = greedy_decode(model.cuda(), src, src_mask, \n","                          max_len=60, start_symbol=output_lang.word2index[\"SOS\"])\n","      original = \"\"\n","      for i in range(0, src.size(1)):\n","          sym = input_lang.index2word[src[0, i].item()]\n","          if sym == \"<blank>\": \n","            original = original[:-1] # Remove trailing space.\n","            break\n","          original += sym + \" \"\n","\n","      # Get the true translation.\n","      pred_translation = \"\"\n","      for i in range(1, out.size(1)):\n","          sym = output_lang.index2word[out[0, i].item()]\n","          if sym == \"EOS\": \n","            pred_translation = pred_translation[:-1]\n","            break\n","          pred_translation += sym + \" \"\n","\n","      # Get the prediction.\n","      true_translation = \"\"\n","      for i in range(1, batch.trg.size(1)):\n","          sym = output_lang.index2word[batch.trg.data[0,i].item()]\n","          if sym == \"EOS\": \n","            true_translation = true_translation[:-1]\n","            break\n","          true_translation += sym + \" \"\n","\n","      # Bleu Score.\n","      score = int(sacrebleu.raw_corpus_bleu([pred_translation], [[true_translation]], .01).score)\n","\n","      # if ix == 100:\n","      #   print(\"Original\", original)\n","      #   print(\"True Translation\", true_translation)\n","      #   print(\"Pred Translation\", pred_translation)\n","      #   print(\"Score:\", score)\n","\n","      bleu_scores.append(score)\n","\n","      if num_examples is not None:\n","        if ix == num_examples:\n","          break\n","  return np.array(bleu_scores)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Sqztnomza7Aw"},"source":["## Training"]},{"cell_type":"code","metadata":{"id":"tcOd1uzcI_pe"},"source":["class Batch:\n","    \"Object for holding a batch of data with mask during training.\"\n","    def __init__(self, src, trg=None, pad=0):\n","        self.src = src\n","        self.src_mask = (src != pad).unsqueeze(-2)\n","        if trg is not None:\n","            self.trg = trg[:, :-1]\n","            self.trg_y = trg[:, 1:]\n","            self.trg_mask = \\\n","                self.make_std_mask(self.trg, pad)\n","            self.ntokens = (self.trg_y != pad).data.sum()\n","    \n","    @staticmethod\n","    def make_std_mask(tgt, pad):\n","        \"Create a mask to hide padding and future words.\"\n","        tgt_mask = (tgt != pad).unsqueeze(-2)\n","        tgt_mask = tgt_mask & Variable(\n","            subsequent_mask(tgt.size(-1)).type_as(tgt_mask.data))\n","        return tgt_mask"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AFch691tJEwT"},"source":["def run_epoch(data_iter, model, loss_compute):\n","    \"Standard Training and Logging Function\"\n","    start = time.time()\n","    total_tokens = 0\n","    total_loss = 0\n","    tokens = 0\n","    for i, data in enumerate(data_iter):\n","        \n","        src, trg = data\n","        batch = Batch(src.cuda(),trg.cuda())\n","        out = model.forward(batch.src, batch.trg, \n","                            batch.src_mask, batch.trg_mask)\n","        loss = loss_compute(out, batch.trg_y, batch.ntokens)\n","        total_loss += loss\n","        total_tokens += batch.ntokens\n","        tokens += batch.ntokens\n","        if i % 50 == 1:\n","            elapsed = time.time() - start\n","            # print(\"Epoch Step: %d Loss: %f Tokens per Sec: %f\" %\n","                    # (i, loss / batch.ntokens, tokens / elapsed))\n","            start = time.time()\n","            tokens = 0\n","    return total_loss / total_tokens"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G2S2x4dNJL-z"},"source":["#optimization\n","\n","class NoamOpt:\n","    \"Optim wrapper that implements rate.\"\n","    def __init__(self, model_size, factor, warmup, optimizer):\n","        self.optimizer = optimizer\n","        self._step = 0\n","        self.warmup = warmup\n","        self.factor = factor\n","        self.model_size = model_size\n","        self._rate = 0\n","        \n","    def step(self):\n","        \"Update parameters and rate\"\n","        self._step += 1\n","        rate = self.rate()\n","        for p in self.optimizer.param_groups:\n","            p['lr'] = rate\n","        self._rate = rate\n","        self.optimizer.step()\n","        \n","    def rate(self, step = None):\n","        \"Implement `lrate` above\"\n","        if step is None:\n","            step = self._step\n","        return self.factor * \\\n","            (self.model_size ** (-0.5) *\n","            min(step ** (-0.5), step * self.warmup ** (-1.5)))\n","        \n","def get_std_opt(model):\n","    return NoamOpt(model.src_embed[0].d_model, 2, 4000,\n","            torch.optim.Adam(model.parameters(), lr=0, betas=(0.9, 0.98), eps=1e-9))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"42cLO4PvJQ4F"},"source":["#smoothing and loss\n","\n","class LabelSmoothing(nn.Module):\n","    \"Implement label smoothing.\"\n","    def __init__(self, size, padding_idx, smoothing=0.0):\n","        super(LabelSmoothing, self).__init__()\n","        self.criterion = nn.KLDivLoss(size_average=False)\n","        self.padding_idx = padding_idx\n","        self.confidence = 1.0 - smoothing\n","        self.smoothing = smoothing\n","        self.size = size\n","        self.true_dist = None\n","        \n","    def forward(self, x, target):\n","        assert x.size(1) == self.size\n","        true_dist = x.data.clone()\n","        true_dist.fill_(self.smoothing / (self.size - 2))\n","        true_dist.scatter_(1, target.data.unsqueeze(1), self.confidence)\n","        true_dist[:, self.padding_idx] = 0\n","        mask = torch.nonzero(target.data == self.padding_idx)\n","        if mask.dim() > 0:\n","            true_dist.index_fill_(0, mask.squeeze(), 0.0)\n","        self.true_dist = true_dist\n","        return self.criterion(x, Variable(true_dist, requires_grad=False))\n","\n","class SimpleLossCompute:\n","    \"A simple loss compute and train function.\"\n","    def __init__(self, generator, criterion, opt=None):\n","        self.generator = generator\n","        self.criterion = criterion\n","        self.opt = opt\n","        \n","    def __call__(self, x, y, norm):\n","        x = self.generator(x)\n","        loss = self.criterion(x.contiguous().view(-1, x.size(-1)), \n","                              y.contiguous().view(-1)) / norm\n","        loss.backward()\n","        if self.opt is not None:\n","            self.opt.step()\n","            self.opt.optimizer.zero_grad()\n","        return loss.item() * norm\n","\n","def greedy_decode(model, src, src_mask, max_len, start_symbol):\n","    memory = model.encode(src, src_mask)\n","    ys = torch.ones(1, 1).fill_(start_symbol).type_as(src.data)\n","    for i in range(max_len-1):\n","        out = model.decode(memory, src_mask, \n","                           Variable(ys), \n","                           Variable(subsequent_mask(ys.size(1))\n","                                    .type_as(src.data)))\n","        prob = model.generator(out[:, -1])\n","        _, next_word = torch.max(prob, dim = 1)\n","        next_word = next_word.data[0]\n","        ys = torch.cat([ys, \n","                        torch.ones(1, 1).type_as(src.data).fill_(next_word)], dim=1)\n","    return ys\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8IsErUiRJe80","executionInfo":{"status":"ok","timestamp":1620858186376,"user_tz":240,"elapsed":7836,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"}},"outputId":"a9c56b74-97e1-4257-887c-de69f14323a7"},"source":["pad_idx = output_lang.word2index[\"<blank>\"]\n","model = make_model(input_lang.n_words,output_lang.n_words,N=6)\n","model.cuda()\n","criterion = LabelSmoothing(size=output_lang.n_words,padding_idx=pad_idx,smoothing=0.1)\n","criterion.cuda()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.\n","/usr/local/lib/python3.7/dist-packages/torch/nn/_reduction.py:42: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.\n","  warnings.warn(warning.format(ret))\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["LabelSmoothing(\n","  (criterion): KLDivLoss()\n",")"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"gEOZtbiMJl2X","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9aecb016-98fb-4ec6-e925-66db90529ea1"},"source":["model_opt = NoamOpt(model.src_embed[0].d_model, 1, 2000,\n","            torch.optim.Adam(model.parameters(), lr=0, betas=(0.9, 0.98), eps=1e-9))\n","\n","losses = []\n","val_losses = []\n","test_bleu_scores = [0,0,0,0,0]\n","train_bleu_scores = [0,0,0,0,0]\n","\n","model_name = \"etet_nikud\"\n","\n","\n","for epoch in tqdm(range(40)):\n","  model_path = '/content/gdrive/MyDrive/{}.pth'.format(model_name + \"_epoch_\"+str(epoch))\n","  print(model_path)\n","\n","  model.train()\n","  \n","  loss_per_token = run_epoch(train_loader,model, SimpleLossCompute(model.generator,criterion,model_opt))\n","  losses.append(loss_per_token)\n","\n","  model.eval() # NOTE(yorai): Could this induce datal leakage? I don't think it should, but MAYBE?\n","  loss_val = run_epoch(valid_loader, model,\n","           SimpleLossCompute(model.generator,criterion,None))\n","  val_losses.append(loss_val)\n","\n","  if epoch > 5:\n","    # NOTE(yorai): idk why I am creating new DataLoaders--don't worry about it.\n","    test_bleu_scores.append(bleu_for_model(model, DataLoader(valid_data,shuffle=True,batch_size=1,), 300).mean())\n","    train_bleu_scores.append(bleu_for_model(model, DataLoader(train_data,shuffle=True,batch_size=1,), 300).mean())\n","    print(\"Test BLEU Scores\", test_bleu_scores)\n","    print(\"Train BLEU Scores\", train_bleu_scores)\n","\n","  print(\"Epoch:\", epoch, \"Loss:\", loss_per_token, \"Val Loss:\", loss_val)\n","  torch.save(model.state_dict(), model_path)\n","\n","print(\"Train losses:\\n\", losses)\n","print(\"Test losses:\\n\", losses)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["  2%|▎         | 1/40 [01:46<1:09:32, 106.99s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 0 Loss: tensor(8.0983, device='cuda:0') Val Loss: tensor(7.7001, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r  5%|▌         | 2/40 [03:43<1:09:28, 109.70s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 1 Loss: tensor(7.3713, device='cuda:0') Val Loss: tensor(7.0582, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r  8%|▊         | 3/40 [05:39<1:08:58, 111.84s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 2 Loss: tensor(6.8323, device='cuda:0') Val Loss: tensor(6.6800, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 10%|█         | 4/40 [07:36<1:08:02, 113.41s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 3 Loss: tensor(6.5626, device='cuda:0') Val Loss: tensor(6.4467, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 12%|█▎        | 5/40 [09:33<1:06:46, 114.46s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 4 Loss: tensor(6.4691, device='cuda:0') Val Loss: tensor(6.2322, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 15%|█▌        | 6/40 [11:30<1:05:17, 115.21s/it]"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 5 Loss: tensor(6.2730, device='cuda:0') Val Loss: tensor(5.9299, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 18%|█▊        | 7/40 [20:17<2:11:18, 238.75s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279]\n","Epoch: 6 Loss: tensor(5.9243, device='cuda:0') Val Loss: tensor(5.5354, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 20%|██        | 8/40 [28:49<2:50:57, 320.54s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482]\n","Epoch: 7 Loss: tensor(5.6345, device='cuda:0') Val Loss: tensor(5.1525, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 22%|██▎       | 9/40 [37:20<3:15:13, 377.84s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333]\n","Epoch: 8 Loss: tensor(5.2965, device='cuda:0') Val Loss: tensor(4.7476, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 25%|██▌       | 10/40 [46:02<3:30:34, 421.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227]\n","Epoch: 9 Loss: tensor(4.9133, device='cuda:0') Val Loss: tensor(4.2786, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 28%|██▊       | 11/40 [54:47<3:38:35, 452.27s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319]\n","Epoch: 10 Loss: tensor(4.5511, device='cuda:0') Val Loss: tensor(3.8133, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 30%|███       | 12/40 [1:03:33<3:41:21, 474.33s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837]\n","Epoch: 11 Loss: tensor(4.0828, device='cuda:0') Val Loss: tensor(3.3250, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 32%|███▎      | 13/40 [1:12:12<3:39:30, 487.81s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113]\n","Epoch: 12 Loss: tensor(3.7651, device='cuda:0') Val Loss: tensor(2.8977, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 35%|███▌      | 14/40 [1:20:57<3:36:13, 498.99s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638]\n","Epoch: 13 Loss: tensor(3.3642, device='cuda:0') Val Loss: tensor(2.4751, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 38%|███▊      | 15/40 [1:29:46<3:31:35, 507.83s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947]\n","Epoch: 14 Loss: tensor(3.1384, device='cuda:0') Val Loss: tensor(2.0617, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 40%|████      | 16/40 [1:38:35<3:25:39, 514.13s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202]\n","Epoch: 15 Loss: tensor(2.5825, device='cuda:0') Val Loss: tensor(1.6363, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 42%|████▎     | 17/40 [1:47:11<3:17:21, 514.85s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695]\n","Epoch: 16 Loss: tensor(2.1626, device='cuda:0') Val Loss: tensor(1.2720, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 18/40 [1:55:42<3:08:21, 513.71s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907]\n","Epoch: 17 Loss: tensor(1.7873, device='cuda:0') Val Loss: tensor(0.9748, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 48%|████▊     | 19/40 [2:04:14<2:59:35, 513.13s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392]\n","Epoch: 18 Loss: tensor(1.4491, device='cuda:0') Val Loss: tensor(0.7412, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 50%|█████     | 20/40 [2:13:17<2:54:00, 522.01s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359]\n","Epoch: 19 Loss: tensor(1.1540, device='cuda:0') Val Loss: tensor(0.5648, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 52%|█████▎    | 21/40 [2:21:58<2:45:10, 521.63s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515]\n","Epoch: 20 Loss: tensor(0.9368, device='cuda:0') Val Loss: tensor(0.4715, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 55%|█████▌    | 22/40 [2:30:54<2:37:50, 526.16s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172]\n","Epoch: 21 Loss: tensor(0.7889, device='cuda:0') Val Loss: tensor(0.4210, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 57%|█████▊    | 23/40 [2:39:34<2:28:31, 524.23s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538]\n","Epoch: 22 Loss: tensor(0.6412, device='cuda:0') Val Loss: tensor(0.3851, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 60%|██████    | 24/40 [2:48:09<2:19:01, 521.34s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943]\n","Epoch: 23 Loss: tensor(0.5608, device='cuda:0') Val Loss: tensor(0.3613, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 62%|██████▎   | 25/40 [2:57:15<2:12:14, 528.97s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259]\n","Epoch: 24 Loss: tensor(0.4997, device='cuda:0') Val Loss: tensor(0.3456, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 65%|██████▌   | 26/40 [3:06:13<2:04:02, 531.62s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156]\n","Epoch: 25 Loss: tensor(0.4673, device='cuda:0') Val Loss: tensor(0.3417, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 68%|██████▊   | 27/40 [3:15:07<1:55:20, 532.37s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073]\n","Epoch: 26 Loss: tensor(0.4460, device='cuda:0') Val Loss: tensor(0.3238, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 70%|███████   | 28/40 [3:24:04<1:46:45, 533.76s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007, 86.96013289036544]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073, 93.80066445182725]\n","Epoch: 27 Loss: tensor(0.4117, device='cuda:0') Val Loss: tensor(0.3097, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 72%|███████▎  | 29/40 [3:32:56<1:37:44, 533.13s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007, 86.96013289036544, 85.50830564784053]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073, 93.80066445182725, 96.16611295681064]\n","Epoch: 28 Loss: tensor(0.3827, device='cuda:0') Val Loss: tensor(0.2868, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 75%|███████▌  | 30/40 [3:41:49<1:28:50, 533.02s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007, 86.96013289036544, 85.50830564784053, 88.29235880398672]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073, 93.80066445182725, 96.16611295681064, 96.35548172757476]\n","Epoch: 29 Loss: tensor(0.3437, device='cuda:0') Val Loss: tensor(0.2647, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 78%|███████▊  | 31/40 [3:50:37<1:19:44, 531.64s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007, 86.96013289036544, 85.50830564784053, 88.29235880398672, 90.28571428571429]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073, 93.80066445182725, 96.16611295681064, 96.35548172757476, 95.83720930232558]\n","Epoch: 30 Loss: tensor(0.3192, device='cuda:0') Val Loss: tensor(0.2494, device='cuda:0')\n"],"name":"stdout"},{"output_type":"stream","text":["\r 80%|████████  | 32/40 [3:59:25<1:10:42, 530.37s/it]"],"name":"stderr"},{"output_type":"stream","text":["Test BLEU Scores [0, 0, 0, 0, 0, 1.0664451827242525, 1.7475083056478404, 1.920265780730897, 1.5282392026578073, 1.9833887043189369, 2.990033222591362, 5.803986710963455, 5.657807308970099, 7.4186046511627906, 15.289036544850498, 29.308970099667775, 40.01328903654485, 53.30232558139535, 63.19601328903654, 69.7109634551495, 73.9734219269103, 78.265780730897, 79.53488372093024, 81.90697674418605, 82.37541528239203, 83.43853820598007, 86.96013289036544, 85.50830564784053, 88.29235880398672, 90.28571428571429, 92.71428571428571]\n","Train BLEU Scores [0, 0, 0, 0, 0, 0.7441860465116279, 2.179401993355482, 1.2192691029900333, 3.2691029900332227, 4.504983388704319, 3.2325581395348837, 4.45514950166113, 8.09966777408638, 8.249169435215947, 18.737541528239202, 27.182724252491695, 45.86046511627907, 50.87375415282392, 65.68106312292359, 75.8671096345515, 81.40199335548172, 84.52159468438538, 90.27242524916943, 89.0299003322259, 90.30564784053156, 92.82392026578073, 93.80066445182725, 96.16611295681064, 96.35548172757476, 95.83720930232558, 97.04318936877077]\n","Epoch: 31 Loss: tensor(0.3001, device='cuda:0') Val Loss: tensor(0.2318, device='cuda:0')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3bOPHoyhA4aa"},"source":["print(\"Train losses:\\n\", losses)\n","print(\"Test losses:\\n\", losses)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0djjkqkSQzT5"},"source":["#Look at the results and save model."]},{"cell_type":"code","metadata":{"id":"mOnml5rDSpei"},"source":["# '''\n","torch.save({\n","    #\"SRC\": input_lang,\n","    #\"TGT\": output_lang,\n","    \"model\": model.state_dict()\n","},'/content/model.h5')\n","# '''"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Kkd7OCuen7B"},"source":["#from google.colab import files\n","# files.download('model.h5') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RaBXYRaaXsx2","executionInfo":{"elapsed":1164,"status":"ok","timestamp":1620850332293,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"8031bb15-bc88-4ec0-fccb-c5a1e65dbc43"},"source":["for i, data in enumerate(valid_loader):\n","  \n","    src, trg = data\n","    batch = Batch(src.cuda(),trg.cuda())\n","    src = batch.src[:1]\n","    src_mask = (src != input_lang.word2index[\"<blank>\"]).unsqueeze(-2)\n","    out = greedy_decode(model.cuda(), src, src_mask, \n","                        max_len=60, start_symbol=output_lang.word2index[\"SOS\"])\n","    for i in range(0, src.size(1)):\n","        sym = input_lang.index2word[src[0, i].item()]\n","        if sym == \"<blank>\": break\n","        print(sym, end =\" \")\n","    print()\n","    print(\"Translation:\", end=\"\\t\")\n","    for i in range(1, out.size(1)):\n","        sym = output_lang.index2word[out[0, i].item()]\n","        if sym == \"EOS\": break\n","        print(sym, end =\" \")\n","    print()\n","    print(\"Target:\", end=\"\\t\")\n","    for i in range(1, batch.trg.size(1)):\n","        \n","        sym = output_lang.index2word[batch.trg.data[0,i].item()]\n","        if sym == \"EOS\": break\n","        print(sym, end =\" \")\n","    print()\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["שריד השארנו והטף והנשים מתם את כל עיר ונחרם ההוא בעת את כל עריו ונלכד \n","Translation:\tשריד השארנו והילדים והנשים עריו תושבי כל את והשמדנו עריו כל את אז לכדנו \n","Target:\tשריד השארנו והילדים והנשים עריו תושבי כל את והשמדנו עריו כל את אז לכדנו \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gc_71DUGNoWO"},"source":["# '''\n","model_pt = torch.load('/content/model.h5')\n","# '''\n","src = input_lang\n","trg = output_lang\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DgYctbDFYFEq","executionInfo":{"elapsed":197,"status":"ok","timestamp":1620760633998,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"ad0e43b8-e58a-4259-8fad-5190370b1142"},"source":["trg.n_words\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["17241"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6_fyUcw5YH_R","executionInfo":{"elapsed":1260,"status":"ok","timestamp":1620760636825,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"f3b299e9-d60a-4f84-acb9-36a79ca0f6bf"},"source":["# Number of words in +nikud\n","# target 36529\n","# source 19158\n","\n","# Number of words in normal:\n","# target 17241\n","# source "],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mwjE92s9QJgD","executionInfo":{"elapsed":1386,"status":"ok","timestamp":1620850522876,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"716fb768-082f-477f-d79c-4c3d57afcb51"},"source":["\n","modelp = make_model(src.n_words,trg.n_words,N=6)\n","modelp.load_state_dict(model_pt['model'])\n","\n","sent = \"בחדש השלישי לצאת בני ישראל מארץ מצרים ביום הזה באו מדבר סיני\".split()\n","# sent = \"בני ישראל יצאו ממצרים ביד חזקה\".split()\n","\n","srcw = torch.LongTensor([[src.word2index[w] for w in sent]])\n","\n","srcw = Variable(srcw)\n","src_mask = (srcw != src.word2index[\"<blank>\"]).unsqueeze(-2)\n","out = greedy_decode(modelp, srcw, src_mask, \n","                    max_len=5, start_symbol=trg.word2index[\"SOS\"])\n","\n","print(\"Translation:\", end=\"\\t\")\n","trans = \"SOS \"\n","for i in range(1, out.size(1)):\n","    sym = trg.index2word[out[0, i].item()]\n","    if sym == \"EOS\": break\n","    trans += sym + \" \"\n","print(trans)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:20: UserWarning: nn.init.xavier_uniform is now deprecated in favor of nn.init.xavier_uniform_.\n"],"name":"stderr"},{"output_type":"stream","text":["Translation:\tSOS השלישי החודש ימי שבעת \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Sfa0XinPA9i","executionInfo":{"elapsed":2554,"status":"ok","timestamp":1620756377284,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"dfe82f1a-10ce-4fbc-f72a-c68ed32ccc7a"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: sacrebleu in /usr/local/lib/python3.7/dist-packages (1.5.1)\n","Requirement already satisfied: portalocker==2.0.0 in /usr/local/lib/python3.7/dist-packages (from sacrebleu) (2.0.0)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"n2ZllzS1h1dE"},"source":["# Experiments + Ablation Studies\n","Hello this is Yorai here. I want to try understanding what this model is doing and when and why."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eanqC3Kr3BLF","executionInfo":{"elapsed":2673,"status":"ok","timestamp":1620845613065,"user":{"displayName":"yorai shaoul","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgN25RgLPR1JvtQDGJ4CirowqEOI1egd6SJ01nRn6o=s64","userId":"09836500940374628679"},"user_tz":240},"outputId":"8f3c7ddc-eaa9-48a1-a8e2-839f721d145b"},"source":["! pip install sacrebleu\n","import sacrebleu\n","from tqdm import tqdm"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: sacrebleu in /usr/local/lib/python3.7/dist-packages (1.5.1)\n","Requirement already satisfied: portalocker==2.0.0 in /usr/local/lib/python3.7/dist-packages (from sacrebleu) (2.0.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"FXORvQVLh9VA","outputId":"7e8b5470-19e8-4a2c-990f-405a523141fa"},"source":["batch_size = 1\n","valid_loader_bleu = DataLoader(valid_data,shuffle=True,batch_size=batch_size,)\n","\n","# Set up BLEU score reporting for the test set.\n","'''\n","Usage:\n","pred = \"this dog is cute and nice\"\n","targ = \"this dog is cute and nice\"\n","sacrebleu.raw_corpus_bleu([pred], [[targ]], .01).score\n","'''\n","print(\"Evaluating\", len(valid_loader_bleu), \"validation sentences.\")\n","bleu_scores = []\n","# NOTE(yorai): Test and Validation are one and the same here. Test on Validation then.\n","for ix, data in tqdm(enumerate(valid_loader_bleu)):\n","    src,trg = data\n","    batch = Batch(src.cuda(),trg.cuda())\n","    src = batch.src[:1]\n","    src_mask = (src != input_lang.word2index[\"<blank>\"]).unsqueeze(-2)\n","    out = greedy_decode(model.cuda(), src, src_mask, \n","                        max_len=60, start_symbol=output_lang.word2index[\"SOS\"])\n","    original = \"\"\n","    for i in range(0, src.size(1)):\n","        sym = input_lang.index2word[src[0, i].item()]\n","        if sym == \"<blank>\": \n","          original = original[:-1] # Remove trailing space.\n","          break\n","        original += sym + \" \"\n","\n","\n","        # Get the true translation.\n","        pred_translation = \"\"\n","        for i in range(1, out.size(1)):\n","            sym = output_lang.index2word[out[0, i].item()]\n","            if sym == \"EOS\": \n","              pred_translation = pred_translation[:-1]\n","              break\n","            pred_translation += sym + \" \"\n","\n","        # Get the prediction.\n","        true_translation = \"\"\n","        for i in range(1, batch.trg.size(1)):\n","            sym = output_lang.index2word[batch.trg.data[0,i].item()]\n","            if sym == \"EOS\": \n","              true_translation = true_translation[:-1]\n","              break\n","            true_translation += sym + \" \"\n","\n","    # Bleu Score.\n","    score = int(sacrebleu.raw_corpus_bleu([pred_translation], [[true_translation]], .01).score)\n","    print(\"Original\", original)\n","    print(\"True Translation\", true_translation)\n","    print(\"Pred Translation\", pred_translation)\n","    print(\"Score:\", score)\n","\n","    bleu_scores.append(score)\n","\n","    if ix == 300:\n","      break\n","print(bleu_scores)\n","plt.figure()\n","plt.hist(bleu_scores, [i*10 for i in range(11)])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Evaluating 1840 validation sentences.\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:00,  1.41it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original ואת רעמסס את פתם לפרעה מסכנות ערי ויבן בסבלתם ענתו למען מסים שרי עליו וישימו\n","True Translation רעמסס ואת פתום את לפרעה מחסנים של ערים בנה הוא בשעבוד אותו להשפיל כדי אותו שיעבידו שוטרים עליו מנו מצרים\n","Pred Translation אותם המזבח על המזבח את המזבח על המזבח על המזבח את המזבח את אהרן את אהרן\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [00:01,  1.40it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original ואשם לא תעשינה אשר יהוה ממצות אחת בעשתה הארץ מעם בשגגה תחטא אחת ואם נפש\n","True Translation אשם ויהיה אותן לעשות שאסור יהוה ממצוות אחת על ויעבור בטעות יחטא פשוט אדם ואם\n","Pred Translation יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני ליהוה אותם ליהוה אותם ליהוה אותם ליהוה יהוה\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [00:02,  1.40it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original תדבקון ובו תעבדו ואתו תשמעו ובקלו תשמרו ואת מצותיו תיראו ואתו תלכו אלהיכם יהוה אחרי\n","True Translation בתכונותיו והדמו אותו עבדו בקולו שמעו מצוותיו את שמרו אותו כבדו אלהיכם יהוה אחרי לכו\n","Pred Translation יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [00:02,  1.39it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original את ישראל הרפאים ויחנטו את אביו לחנט את הרפאים את עבדיו יוסף ויצו\n","True Translation ישראל את חנטו הרופאים אביו את לחנוט הרופאים את עבדיו את צוה יוסף\n","Pred Translation ישראל את ישראל את ישראל את ישראל את ישראל את ישראל\n","Score: 1\n"],"name":"stdout"},{"output_type":"stream","text":["\n","5it [00:03,  1.39it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original ההוא הנביא ומת אחרים אלהים בשם ידבר ואשר לדבר לא צויתיו אשר את בשמי דבר לדבר יזיד אשר הנביא אך\n","True Translation ימות ההוא הנביא אחרים אלהים בשם שידבר או לדבר אותו צויתי שלא דבר בשמי וידבר שירשיע הנביא אבל\n","Pred Translation ואמר דבר יהוה אל דבר יהוה אל אמר\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","6it [00:04,  1.37it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original פן תספה המלט ההרה בכל הככר ואל תעמד אחריך אל תביט על נפשך המלט ויאמר החוצה אתם כהוציאם ויהי\n","True Translation תשמד שלא כדי להר ברח הבקעה בכל תעצור ואל לאחוריך תביט אל לנפשך ברח האחד אמר החוצה אותם כשהוציאו\n","Pred Translation ואמר דבר לך לך לך לך לך לך לך לך לך לך לך לך לך לך אמר\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","7it [00:05,  1.37it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original הנרות שבעת יאירו המנורה פני אל מול את הנרת בהעלתך אליו ואמרת אל אהרן דבר\n","True Translation לפניה המנורה מול אל יאירו הנרות שבעת הנרות את כשתדליק לו ואמור אהרן אל דבר\n","Pred Translation ישראל אל ישראל אל ישראל אל ישראל אל ישראל אל\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","8it [00:05,  1.39it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original להן אביהן את נחלת והעברת אביהם אחי בתוך נחלה אחזת להם תתן נתן דברת צלפחד בנות כן\n","True Translation להן אביהן נחלת את העבר אביהן אחי עם יחד לנחלה קרקע אחזת להן תן נכונים צלפחד בנות דברי\n","Pred Translation אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו ואמר ואמר\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","9it [00:06,  1.39it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original שעירה אל אדני אשר אבא הילדים ולרגל אשר לפני המלאכה לרגל לאטי אתנהלה ואני עבדו לפני אדני יעבר נא\n","True Translation לשעיר אדוני אל שאבוא הילדים צורך וכפי עלי המטלת המלאכה צורך כפי לאט עצמי את אוביל ואני עבדו לפני יעבור אדוני בבקשה \n","Pred Translation ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר ואמר משה\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","10it [00:07,  1.40it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original ואהרן משה הוא ממצרים את בני ישראל להוציא מלך מצרים אל פרעה המדברים הם\n","True Translation ואהרן משה הם ממצרים ישראל בני את להוציא מצרים מלך פרעה אל שמדברים אלה הם\n","Pred Translation ישראל אל ישראל אל ישראל אל ישראל אל ישראל אל\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","11it [00:07,  1.40it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original יהוה בשם ויקרא ליהוה מזבח ויבן שם מקדם והעי מים בית אל אהלה ויט לבית אל מקדם ההרה משם ויעתק\n","True Translation ליהוה והתפלל ליהוה מזבח שם בנה הוא ממזרח והעי ממערב אל שבית במקום אהלו את שם והקים אל לבית מזרחית להר אהלו את משם העביר הוא\n","Pred Translation יהוה לפני לפני יהוה לפני יהוה לפני משה את ישראל את ישראל את ישראל בני אל\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","12it [00:08,  1.42it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original מכל העמים המעט כי אתם בכם ויבחר בכם יהוה חשק מכל העמים מרבכם\n","True Translation העמים מכל המעטים דוקא אתם שהרי העמים מכל מרבים שאתם מפני בכם ובחר בכם חשק יהוה\n","Pred Translation יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה לפני יהוה\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","13it [00:09,  1.41it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original ובינך ביני אלהים ראה עמנו איש אין על בנתי נשים ואם תקח את בנתי אם תענה\n","True Translation ובינך ביני אלהים ראה אבל שרואה אתנו איש אין אמנם בנותי על נוספות נשים תקח ואם בנותי את תענה אם\n","Pred Translation אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו אותו ישראל\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","14it [00:10,  1.40it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original תשקצו ואת נבלתם תאכלו מבשרם לכם יהיו ושקץ\n","True Translation נבלתם את ותרחיקו מבשרם תאכלו אל עבורכם מאוסים יהיו והם\n","Pred Translation ליהוה אותם אותם אותם אותם אותם אותם ליהוה אותם ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה ליהוה\n","Score: 0\n"],"name":"stdout"},{"output_type":"stream","text":["\n","15it [00:10,  1.42it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["Original לאמר אל משה יהוה וידבר\n","True Translation ואמר משה אל דבר יהוה\n","Pred Translation ואמר משה אל דבר יהוה\n","Score: 100\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-4b9a39b333bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0msrc_mask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0minput_lang\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword2index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"<blank>\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     out = greedy_decode(model.cuda(), src, src_mask, \n\u001b[0;32m---> 20\u001b[0;31m                         max_len=60, start_symbol=output_lang.word2index[\"SOS\"])\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0moriginal\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-42-bea2c8ce6ed2>\u001b[0m in \u001b[0;36mgreedy_decode\u001b[0;34m(model, src, src_mask, max_len, start_symbol)\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgreedy_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc_mask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_len\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_symbol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m     \u001b[0mmemory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m     \u001b[0mys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_symbol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype_as\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_len\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-662da318d97c>\u001b[0m in \u001b[0;36mencode\u001b[0;34m(self, src, src_mask)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msrc_embed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmemory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msrc_mask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtgt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtgt_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-662da318d97c>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, mask)\u001b[0m\n\u001b[1;32m     47\u001b[0m         \u001b[0;34m\"Pass the input (and mask) through each layer in turn.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m             \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-662da318d97c>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, mask)\u001b[0m\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m         \u001b[0;34m\"Follow Figure 1 (left) for connections.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msublayer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mself_attn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msublayer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeed_forward\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-662da318d97c>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x, sublayer)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msublayer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0;34m\"Apply residual connection to any sublayer with the same size.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msublayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    887\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m         for hook in itertools.chain(\n\u001b[1;32m    891\u001b[0m                 \u001b[0m_global_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-31-662da318d97c>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     61\u001b[0m         \u001b[0mmean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0mstd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ma_2\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mmean\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mstd\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meps\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mb_2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mSublayerConnection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"stream","text":["\n"," 15%|█▌        | 6/40 [27:38<2:36:36, 276.37s/it]\n","15it [00:11,  1.30it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"duauiZJSi_Wd"},"source":["print(len(valid_loader))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AU5ZiHb99NBB"},"source":["plt.figure(1)\n","plt.plot(losses)\n","plt.show()\n","print([i.item() for i in losses])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j2v-OYnoFOTP"},"source":[""],"execution_count":null,"outputs":[]}]}